/**
 * @file MtcCliDb.java
 * @brief MtcCliDb interface
 */
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.juphoon.lemon;

/**
 * @brief MtcCliDb interface
 */
public class MtcCliDb implements MtcCliDbConstants {
/**
 * @brief Apply all data change to all components.
 *
 * @retval ZOK Apply data change successfully.
 * @retval ZFAILED Apply data change failed.
 */
  public static int Mtc_CliDbApplyAll() {
    return MtcCliDbJNI.Mtc_CliDbApplyAll();
  }

/**
 * @brief Get data change apply flag.
 *
 * @return Data change apply flag.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetApplyChange
 */
  public static boolean Mtc_CliDbGetApplyChange() {
    return MtcCliDbJNI.Mtc_CliDbGetApplyChange();
  }

/**
 * @brief Set data change apply flag realtime.
 * If data change apply flag is true, below db set
 * functions(ex @ref MtcCliDb::Mtc_CliDbSetUserName) will apply change immediately.
 *
 * @retval ZOK Set data change apply flag successfully.
 * @retval ZFAILED Set data change apply flag failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetApplyChange
 */
  public static int Mtc_CliDbSetApplyChange(boolean bApply) {
    return MtcCliDbJNI.Mtc_CliDbSetApplyChange(bApply);
  }

/**
 * @brief Get local IP from database.
 *
 * @return The string of local IP string.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetLocalIp
 */
  public static String Mtc_CliDbGetLocalIp() {
    return MtcCliDbJNI.Mtc_CliDbGetLocalIp();
  }

/**
 * @brief Get local IP from database.
 *
 * @return The local IP value in network byte order.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetLocalIp
 */
  public static int Mtc_CliDbGetLocalIpX() {
    return MtcCliDbJNI.Mtc_CliDbGetLocalIpX();
  }

/**
 * @brief Set local IP.
 *
 * @param [in] pcIp The IP value in network string order.
 *
 * @retval ZOK Set local IP successfully.
 * @retval ZFAILED Set local IP failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetLocalIp
 */
  public static int Mtc_CliDbSetLocalIp(String pcIp) {
    return MtcCliDbJNI.Mtc_CliDbSetLocalIp(pcIp);
  }

/**
 * @brief Get log open option from database.
 *
 * @retval true Print out log information.
 * @retval false Do not print log.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetLogOpen
 */
  public static boolean Mtc_CliDbGetLogOpen() {
    return MtcCliDbJNI.Mtc_CliDbGetLogOpen();
  }

/**
 * @brief Set log open option.
 *
 * @param [in] bOpen If true, print out log information. Otherwise, do not print.
 *
 * @retval ZOK Set log open option successfully.
 * @retval ZFAILED Set log open option failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetLogOpen
 */
  public static int Mtc_CliDbSetLogOpen(boolean bOpen) {
    return MtcCliDbJNI.Mtc_CliDbSetLogOpen(bOpen);
  }

/**
 * @brief Get log level.
 *
 * @return The log level, includes ZLOG_LEVEL_FATAL, ZLOG_LEVEL_ERROR,
 *         ZLOG_LEVEL_WARN, ZLOG_LEVEL_INFO, ZLOG_LEVEL_DBG.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetLogLevel
 */
  public static int Mtc_CliDbGetLogLevel() {
    return MtcCliDbJNI.Mtc_CliDbGetLogLevel();
  }

/**
 * @brief Set log open level.
 *
 * @param [in] dwLevel The level of log, includes ZLOG_LEVEL_FATAL, 
 *        ZLOG_LEVEL_ERROR, ZLOG_LEVEL_WARN, ZLOG_LEVEL_INFO, ZLOG_LEVEL_DBG.
 *
 * @retval ZOK Set log open level successfully.
 * @retval ZFAILED Set log open level failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetLogLevel
 */
  public static int Mtc_CliDbSetLogLevel(int dwLevel) {
    return MtcCliDbJNI.Mtc_CliDbSetLogLevel(dwLevel);
  }

/**
 * @brief Get user name from database.
 *
 * @return The string of user name.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetUserName
 */
  public static String Mtc_CliDbGetUserName() {
    return MtcCliDbJNI.Mtc_CliDbGetUserName();
  }

/**
 * @brief Set user name.
 *
 * @param [in] pcName The string of user name.
 *
 * @retval ZOK Set user name successfully.
 * @retval ZFAILED Set user name failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetUserName
 */
  public static int Mtc_CliDbSetUserName(String pcName) {
    return MtcCliDbJNI.Mtc_CliDbSetUserName(pcName);
  }

/**
 * @brief Get nick name from database.
 *
 * @return The string of nick name.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetNickName
 */
  public static String Mtc_CliDbGetNickName() {
    return MtcCliDbJNI.Mtc_CliDbGetNickName();
  }

/**
 * @brief Set nick name.
 *
 * @param [in] pcName The string of nick name.
 *
 * @retval ZOK Set nick name successfully.
 * @retval ZFAILED Set nick name failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetNickName
 */
  public static int Mtc_CliDbSetNickName(String pcName) {
    return MtcCliDbJNI.Mtc_CliDbSetNickName(pcName);
  }

/**
 * @brief Get authorization name from database.
 *
 * @return The string of authorization name.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetAuthName
 */
  public static String Mtc_CliDbGetAuthName() {
    return MtcCliDbJNI.Mtc_CliDbGetAuthName();
  }

/**
 * @brief Set authorization name.
 *
 * @param [in] pcName The string of authorization name.
 *
 * @retval ZOK Set authorization name successfully.
 * @retval ZFAILED Set authorization name failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetAuthName
 */
  public static int Mtc_CliDbSetAuthName(String pcName) {
    return MtcCliDbJNI.Mtc_CliDbSetAuthName(pcName);
  }

/**
 * @brief Get authorization password from database.
 *
 * @return The string of authorization password.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetAuthPass
 */
  public static String Mtc_CliDbGetAuthPass() {
    return MtcCliDbJNI.Mtc_CliDbGetAuthPass();
  }

/**
 * @brief Set authorization password.
 *
 * @param [in] pcPass The string of authorization password.
 *
 * @retval ZOK Set authorization password successfully.
 * @retval ZFAILED Set authorization password failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetAuthPass
 */
  public static int Mtc_CliDbSetAuthPass(String pcPass) {
    return MtcCliDbJNI.Mtc_CliDbSetAuthPass(pcPass);
  }

/**
 * @brief Get Phone Context.
 *
 * @retval The string of phone context.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetPhoneContext
 */
  public static String Mtc_CliDbGetPhoneContext() {
    return MtcCliDbJNI.Mtc_CliDbGetPhoneContext();
  }

/**
 * @brief Set Phone Context.
 *
 * @param [in] pcPhoneContext The string of Phone Context.
 *
 * @retval ZOK Set Phone Context successfully.
 * @retval ZFAILED Set Phone Context failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetPhoneContext
 */
  public static int Mtc_CliDbSetPhoneContext(String pcPhoneContext) {
    return MtcCliDbJNI.Mtc_CliDbSetPhoneContext(pcPhoneContext);
  }

/**
 * @brief Get the type of IMS authentication for the user.
 *
 * @return IMS authentication type, @see @ref MtcCliDbConstants::EN_MTC_IMS_AUTH_UNKNOWN.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetAuthType
 */
  public static int Mtc_CliDbGetAuthType() {
    return MtcCliDbJNI.Mtc_CliDbGetAuthType();
  }

/**
 * @brief Set authorization type.
 *
 * @param [in] iType The authentication type, @see @ref MtcCliDbConstants::EN_MTC_IMS_AUTH_UNKNOWN.
 *
 * @retval ZOK Set authorization type successfully.
 * @retval ZFAILED Set authorization type failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetAuthType
 */
  public static int Mtc_CliDbSetAuthType(int iType) {
    return MtcCliDbJNI.Mtc_CliDbSetAuthType(iType);
  }

/**
 * @brief Get the roam type for the user.
 *
 * @return The roam type, @see @ref EN_MTC_ROAM_TYPE.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetRoamType
 */
  public static int Mtc_CliDbGetRoamType() {
    return MtcCliDbJNI.Mtc_CliDbGetRoamType();
  }

/**
 * @brief Set roam type.
 *
 * @param [in] iType The roam type, @see @ref EN_MTC_ROAM_TYPE.
 *
 * @retval ZOK Set roam type successfully.
 * @retval ZFAILED Set roam type failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetRoamType
 */
  public static int Mtc_CliDbSetRoamType(int iType) {
    return MtcCliDbJNI.Mtc_CliDbSetRoamType(iType);
  }

/**
 * @brief Get support no digest in new REGISTER.
 *
 * @retval true Indicates support no digest.
 * @retval false Indicates not support no digest.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetRegNoDigest
 */
  public static boolean Mtc_CliDbGetRegNoDigest() {
    return MtcCliDbJNI.Mtc_CliDbGetRegNoDigest();
  }

/**
 * @brief Set support no digest in new REGISTER.
 *
 * @param [in] bEnable The support flag.
 *
 * @retval ZOK Set support flag successfully.
 * @retval ZFAILED Set support flag failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetRegNoDigest
 */
  public static int Mtc_CliDbSetRegNoDigest(boolean bEnable) {
    return MtcCliDbJNI.Mtc_CliDbSetRegNoDigest(bEnable);
  }

/**
 * @brief Get support heart beat.
 *
 * @retval true Indicates support heart beat.
 * @retval false Indicates not support support beat.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetSuptHeartbeat
 */
  public static boolean Mtc_CliDbGetSuptHeartbeat() {
    return MtcCliDbJNI.Mtc_CliDbGetSuptHeartbeat();
  }

/**
 * @brief Set support heart beat.
 *
 * @param [in] bSupt The support flag.
 *
 * @retval ZOK Set heart beat successfully.
 * @retval ZFAILED Set heart beat failed.

 *
 * @see @ref MtcCliDb::Mtc_CliDbGetSuptHeartbeat
 */
  public static int Mtc_CliDbSetSuptHeartbeat(boolean bSupt) {
    return MtcCliDbJNI.Mtc_CliDbSetSuptHeartbeat(bSupt);
  }

/**
 * @brief Get heart beat timer length, in seconds.
 *
 * @retval THE length of heart beat timer.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetHeartbeatTmr
 */
  public static int Mtc_CliDbGetHeartbeatTmr() {
    return MtcCliDbJNI.Mtc_CliDbGetHeartbeatTmr();
  }

/**
 * @brief Set heart beat timer length, in seconds.
 *
 * @param [in] dwTmrLen The heart beat timer length.
 *
 * @retval ZOK Set heart beat timer length successfully.
 * @retval ZFAILED Set heart beat timer length failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetHeartbeatTmr
 */
  public static int Mtc_CliDbSetHeartbeatTmr(int dwTmrLen) {
    return MtcCliDbJNI.Mtc_CliDbSetHeartbeatTmr(dwTmrLen);
  }

/**
 * @brief Get user register option from database.
 *
 * @retval true Register to server.
 * @retval false Do not register.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetUserReg
 */
  public static boolean Mtc_CliDbGetUserReg() {
    return MtcCliDbJNI.Mtc_CliDbGetUserReg();
  }

/**
 * @brief Set user register and proxy option.
 *
 * @param [in] bEnable If true, register to server.Otherwise it needn't register.
 *
 * @retval ZOK Set user register option successfully.
 * @retval ZFAILED Set user register option failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetUserReg
 */
  public static int Mtc_CliDbSetUserReg(boolean bEnable) {
    return MtcCliDbJNI.Mtc_CliDbSetUserReg(bEnable);
  }

/**
 * @brief Get register IP from database.
 *
 * @return The string of the sip register and proxy IP.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetSipRegIp
 */
  public static String Mtc_CliDbGetSipRegIp() {
    return MtcCliDbJNI.Mtc_CliDbGetSipRegIp();
  }

/**
 * @brief Set the sip register and proxy IP.
 *
 * @param [in] pcIp The sip register and proxy IP.
 *
 * @retval ZOK Set the sip register IP successfully.
 * @retval ZFAILED Set the sip register IP failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetSipRegIp
 */
  public static int Mtc_CliDbSetSipRegIp(String pcIp) {
    return MtcCliDbJNI.Mtc_CliDbSetSipRegIp(pcIp);
  }

/**
 * @brief Get register expires time.
 *
 * @return Register expires time.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetRegExpire
 */
  public static int Mtc_CliDbGetRegExpire() {
    return MtcCliDbJNI.Mtc_CliDbGetRegExpire();
  }

/**
 * @brief Set register expires time.
 *
 * @param [in] dwExpires Register expires time.

 * @retval ZOK Set Register expires successfully.
 * @retval ZFAILED Set Register expires failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetRegExpire
 */
  public static int Mtc_CliDbSetRegExpire(int dwExpires) {
    return MtcCliDbJNI.Mtc_CliDbSetRegExpire(dwExpires);
  }

/**
 * @brief Get register transport from database.
 *
 * @return The transport of the sip register and proxy.
 *         Transport type @ref MtcCliDbConstants::EN_MTC_TPT_UDP includes 
 *         @ref EN_MTC_TPT_UDP, @ref EN_MTC_TPT_TCP. 
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetSipRegTpt
 */
  public static short Mtc_CliDbGetSipRegTpt() {
    return MtcCliDbJNI.Mtc_CliDbGetSipRegTpt();
  }

/**
 * @brief Set register proxy transport.
 *
 * @param [in] ucTpt Transport type, @ref MtcCliDbConstants::EN_MTC_TPT_UDP includes 
 *             @ref EN_MTC_TPT_UDP, @ref EN_MTC_TPT_TCP. 
 *
 * @retval ZOK Set the sip register transport successfully.
 * @retval ZFAILED Set the sip register transport failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetSipRegTpt
 */
  public static int Mtc_CliDbSetSipRegTpt(short ucTpt) {
    return MtcCliDbJNI.Mtc_CliDbSetSipRegTpt(ucTpt);
  }

/**
 * @brief Get register udp port from database.
 *
 * @return Register port.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetSipRegUdpPort
 */
  public static int Mtc_CliDbGetSipRegUdpPort() {
    return MtcCliDbJNI.Mtc_CliDbGetSipRegUdpPort();
  }

/**
 * @brief Set register udp port.
 *
 * @param [in] dwPort Register udp port .

 * @retval ZOK Set Register port successfully.
 * @retval ZFAILED Set Register port failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetSipRegUdpPort
 */
  public static int Mtc_CliDbSetSipRegUdpPort(int dwPort) {
    return MtcCliDbJNI.Mtc_CliDbSetSipRegUdpPort(dwPort);
  }

/**
 * @brief Get register tcp port from database.
 *
 * @return Register port.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetSipRegTcpPort
 */
  public static int Mtc_CliDbGetSipRegTcpPort() {
    return MtcCliDbJNI.Mtc_CliDbGetSipRegTcpPort();
  }

/**
 * @brief Set register port.
 *
 * @param [in] dwPort Register tcp port .

 * @retval ZOK Set Register port successfully.
 * @retval ZFAILED Set Register port failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetSipRegTcpPort
 */
  public static int Mtc_CliDbSetSipRegTcpPort(int dwPort) {
    return MtcCliDbJNI.Mtc_CliDbSetSipRegTcpPort(dwPort);
  }

/**
 * @brief Get the sip register realm from database.
 *
 * @return The string of sip register realm.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetSipRegRealm
 */
  public static String Mtc_CliDbGetSipRegRealm() {
    return MtcCliDbJNI.Mtc_CliDbGetSipRegRealm();
  }

/**
 * @brief Set the sip register realm.
 *
 * @param [in] pcRealm The sip register realm.
 *
 * @retval ZOK Set the sip register realm successfully.
 * @retval ZFAILED Set the sip register realm failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetSipRegRealm
 */
  public static int Mtc_CliDbSetSipRegRealm(String pcRealm) {
    return MtcCliDbJNI.Mtc_CliDbSetSipRegRealm(pcRealm);
  }

/**
 * @brief Get DNS local listen port from database.
 *
 * @return The DNS local listen port.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetDnsLclPort
 */
  public static int Mtc_CliDbGetDnsLclPort() {
    return MtcCliDbJNI.Mtc_CliDbGetDnsLclPort();
  }

/**
 * @brief Set DNS local listen port.
 *
 * @param [in] dwPort DNS local listen port.
 *
 * @retval ZOK Set DNS local listen port successfully.
 * @retval ZFAILED Set DNS local listen port failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetDnsLclPort
 */
  public static int Mtc_CliDbSetDnsLclPort(int dwPort) {
    return MtcCliDbJNI.Mtc_CliDbSetDnsLclPort(dwPort);
  }

/**
 * @brief Get DNS primary or secondary server IP from database.
 *
 * @param [in] bPrimary DNS primary option.
 *
 * @return The DNS primary or secondary server IP.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetDnsServIp
 */
  public static int Mtc_CliDbGetDnsServIp(boolean bPrimary) {
    return MtcCliDbJNI.Mtc_CliDbGetDnsServIp(bPrimary);
  }

/**
 * @brief Set DNS primary or secondary server IP.
 *
 * @param [in] bPrimary DNS primary option.
 * @param [in] iServIp DNS primary or secondary server IP.
 *
 * @retval ZOK Set DNS primary or secondary server IP successfully.
 * @retval ZFAILED Set DNS primary or secondary server IP failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetDnsServIp
 */
  public static int Mtc_CliDbSetDnsServIp(boolean bPrimary, int iServIp) {
    return MtcCliDbJNI.Mtc_CliDbSetDnsServIp(bPrimary, iServIp);
  }

/**
 * @brief Get DNS primary or secondary server port from database.
 *
 * @param [in] bPrimary DNS primary option.
 *
 * @return The DNS primary or secondary server port.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetDnsServPort
 */
  public static int Mtc_CliDbGetDnsServPort(boolean bPrimary) {
    return MtcCliDbJNI.Mtc_CliDbGetDnsServPort(bPrimary);
  }

/**
 * @brief Set DNS primary or secondary server port.
 *
 * @param [in] bPrimary DNS primary option.
 * @param [in] dwPort DNS primary or secondary server port.
 *
 * @retval ZOK Set DNS primary or secondary server port successfully.
 * @retval ZFAILED Set DNS primary or secondary server port failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetDnsServPort
 */
  public static int Mtc_CliDbSetDnsServPort(boolean bPrimary, int dwPort) {
    return MtcCliDbJNI.Mtc_CliDbSetDnsServPort(bPrimary, dwPort);
  }

/**
 * @brief Get NAT Traversal Mode.
 *
 * @return The NAT Traversal Mode @ref MtcCliDbConstants::EN_MTC_NAT_TRAVERSAL_OFF.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetNatTraversalMode
 */
  public static int Mtc_CliDbGetNatTraversalMode() {
    return MtcCliDbJNI.Mtc_CliDbGetNatTraversalMode();
  }

/**
 * @brief Set NAT Traversal Mode.
 *
 * @param [in] iType The NAT Traversal Mode @ref MtcCliDbConstants::EN_MTC_NAT_TRAVERSAL_OFF.
 *
 * @retval ZOK Set NAT Traversal Mode successfully.
 * @retval ZFAILED Set NAT Traversal Mode failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetNatTraversalMode
 */
  public static int Mtc_CliDbSetNatTraversalMode(int iType) {
    return MtcCliDbJNI.Mtc_CliDbSetNatTraversalMode(iType);
  }

/**
 * @brief Get the stun server name from database.
 *
 * @return The string of the stun server name.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetStunServerName
 */
  public static String Mtc_CliDbGetStunServerName() {
    return MtcCliDbJNI.Mtc_CliDbGetStunServerName();
  }

/**
 * @brief Set the stun server name.
 *
 * @param [in] pcName The stun server name.
 *
 * @retval ZOK Set the stun server name successfully.
 * @retval ZFAILED Set the stun server name failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetStunServerName
 */
  public static int Mtc_CliDbSetStunServerName(String pcName) {
    return MtcCliDbJNI.Mtc_CliDbSetStunServerName(pcName);
  }

/**
 * @brief Get the stun server port from database.
 *
 * @return The string of the stun server port.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetStunServerPort
 */
  public static int Mtc_CliDbGetStunServerPort() {
    return MtcCliDbJNI.Mtc_CliDbGetStunServerPort();
  }

/**
 * @brief Set the stun server port.
 *
 * @param [in] dwPort The stun server port.
 *
 * @retval ZOK Set the stun server port successfully.
 * @retval ZFAILED Set the stun server port failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetStunServerPort
 */
  public static int Mtc_CliDbSetStunServerPort(int dwPort) {
    return MtcCliDbJNI.Mtc_CliDbSetStunServerPort(dwPort);
  }

/**
 * @brief Get the STUN server is support TURN extension.
 *
 * @retval true Server is support TURN extension.
 * @retval false Server is no support TURN extension.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetStunServerSupportTurn
 */
  public static boolean Mtc_CliDbGetStunServerSupportTurn() {
    return MtcCliDbJNI.Mtc_CliDbGetStunServerSupportTurn();
  }

/**
 * @brief Set the STUN server is support TURN extension.
 *
 * @param  bSupport true indicate server is support TURN extension.
 *
 * @retval ZOK Set successfully.
 * @retval ZFAILED Set failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetStunServerSupportTurn
 */
  public static int Mtc_CliDbSetStunServerSupportTurn(boolean bSupport) {
    return MtcCliDbJNI.Mtc_CliDbSetStunServerSupportTurn(bSupport);
  }

/**
 * @brief Get the mdm server address from database.
 *
 * @return The string of the mdm server address.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetMdmServerAddress
 */
  public static String Mtc_CliDbGetMdmServerAddress() {
    return MtcCliDbJNI.Mtc_CliDbGetMdmServerAddress();
  }

/**
 * @brief Set the mdm server address.
 *
 * @param [in] pcServAddr The mdm server address.
 *
 * @retval ZOK Set the mdm server address successfully.
 * @retval ZFAILED Set the mdm server address failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetMdmServerAddress
 */
  public static int Mtc_CliDbSetMdmServerAddress(String pcServAddr) {
    return MtcCliDbJNI.Mtc_CliDbSetMdmServerAddress(pcServAddr);
  }

/**
 * @brief Get the mdm server port from database.
 *
 * @return The string of the mdm server port.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetMdmServerPort
 */
  public static int Mtc_CliDbGetMdmServerPort() {
    return MtcCliDbJNI.Mtc_CliDbGetMdmServerPort();
  }

/**
 * @brief Set the mdm server port.
 *
 * @param [in] wPort The stun server port.
 *
 * @retval ZOK Set the mdm server port successfully.
 * @retval ZFAILED Set the mdm server port failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetMdmServerPort
 */
  public static int Mtc_CliDbSetMdmServerPort(int wPort) {
    return MtcCliDbJNI.Mtc_CliDbSetMdmServerPort(wPort);
  }

/**
 * @brief Get SIP local UDP listen port from database.
 *
 * @return The SIP local UDP listen port.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetSipLclUdpPort
 */
  public static int Mtc_CliDbGetSipLclUdpPort() {
    return MtcCliDbJNI.Mtc_CliDbGetSipLclUdpPort();
  }

/**
 * @brief Set sip local UDP listen port.
 *
 * @param [in] dwPort SIP local UDP listen port.
 *
 * @retval ZOK Set the port successfully.
 * @retval ZFAILED Set the port failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetSipLclTcpPort
 */
  public static int Mtc_CliDbSetSipLclUdpPort(int dwPort) {
    return MtcCliDbJNI.Mtc_CliDbSetSipLclUdpPort(dwPort);
  }

/**
 * @brief Get SIP local TCP listen port from database.
 *
 * @return The SIP local TCP listen port.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetSipLclTcpPort
 */
  public static int Mtc_CliDbGetSipLclTcpPort() {
    return MtcCliDbJNI.Mtc_CliDbGetSipLclTcpPort();
  }

/**
 * @brief Set sip local TCP listen port.
 *
 * @param [in] dwPort SIP local TCP listen port.
 *
 * @retval ZOK Set the port successfully.
 * @retval ZFAILED Set the port failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetSipLclTcpPort
 */
  public static int Mtc_CliDbSetSipLclTcpPort(int dwPort) {
    return MtcCliDbJNI.Mtc_CliDbSetSipLclTcpPort(dwPort);
  }

/**
 * @brief Get SIP timer 1.
 *
 * @return The SIP timer 1 length.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetSipTmr1
 */
  public static int Mtc_CliDbGetSipTmr1() {
    return MtcCliDbJNI.Mtc_CliDbGetSipTmr1();
  }

/**
 * @brief Set sip timer 1.
 *
 * @param [in] dwTimeLen timer 1 length.
 *
 * @retval ZOK Set the timer 1 successfully.
 * @retval ZFAILED Set the timer 1 failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetSipTmr1
 */
  public static int Mtc_CliDbSetSipTmr1(int dwTimeLen) {
    return MtcCliDbJNI.Mtc_CliDbSetSipTmr1(dwTimeLen);
  }

/**
 * @brief Get SIP timer 2.
 *
 * @return The SIP timer 2 length.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetSipTmr2
 */
  public static int Mtc_CliDbGetSipTmr2() {
    return MtcCliDbJNI.Mtc_CliDbGetSipTmr2();
  }

/**
 * @brief Set sip timer 2.
 *
 * @param [in] dwTimeLen timer 2 length.
 *
 * @retval ZOK Set the timer 2 successfully.
 * @retval ZFAILED Set the timer 2 failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetSipTmr2
 */
  public static int Mtc_CliDbSetSipTmr2(int dwTimeLen) {
    return MtcCliDbJNI.Mtc_CliDbSetSipTmr2(dwTimeLen);
  }

/**
 * @brief Get SIP timer 4.
 *
 * @return The SIP timer 4 length.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetSipTmr4
 */
  public static int Mtc_CliDbGetSipTmr4() {
    return MtcCliDbJNI.Mtc_CliDbGetSipTmr4();
  }

/**
 * @brief Set sip timer 4.
 *
 * @param [in] dwTimeLen timer 4 length.
 *
 * @retval ZOK Set the timer 4 successfully.
 * @retval ZFAILED Set the timer 4 failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetSipTmr4
 */
  public static int Mtc_CliDbSetSipTmr4(int dwTimeLen) {
    return MtcCliDbJNI.Mtc_CliDbSetSipTmr4(dwTimeLen);
  }

/**
 * @brief Get use Ipv4 option from database.
 *
 * @retval true Use Ipv4.
 * @retval false Do not use Ipv4.
 */
  public static boolean Mtc_CliDbGetUseIpv4() {
    return MtcCliDbJNI.Mtc_CliDbGetUseIpv4();
  }

/**
 * @brief Get use TEL URI option from database.
 *
 * @retval true Use TEL URI.
 * @retval false Do not use TEL URI.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetUseTelUri
 */
  public static boolean Mtc_CliDbGetUseTelUri() {
    return MtcCliDbJNI.Mtc_CliDbGetUseTelUri();
  }

/**
 * @brief Get use TEL URI option.
 *
 * @param [in] bIvtTel Use TEL URI option.
 *
 * @retval ZOK Set user TEL URI option successfully.
 * @retval ZFAILED Set user TEL URI option failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetUseTelUri
 */
  public static int Mtc_CliDbSetUseTelUri(boolean bIvtTel) {
    return MtcCliDbJNI.Mtc_CliDbSetUseTelUri(bIvtTel);
  }

/**
 * @brief Get SIP register or proxy server IP from database.
 *
 * @note: It can set different REGISTAR and Proxy compare to @ref MtcCliDb::Mtc_CliDbGetSipRegIp.
 *
 * @param [in] bProxy SIP proxy option.
 *
 * @return Get SIP register or proxy server IP.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetSipServIp
 */
  public static String Mtc_CliDbGetSipServIp(boolean bProxy) {
    return MtcCliDbJNI.Mtc_CliDbGetSipServIp(bProxy);
  }

/**
 * @brief Set SIP register or proxy server IP.
 *
 * @note: It can set different REGISTAR and Proxy compare to @ref MtcCliDb::Mtc_CliDbSetSipRegIp.
 *
 * @param [in] bProxy SIP proxy option.
 * @param [in] pcIp SIP register or proxy server IP.
 *
 * @retval ZOK Set SIP register or proxy server IP successfully.
 * @retval ZFAILED Set SIP register or proxy server IP failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetSipServIp
 */
  public static int Mtc_CliDbSetSipServIp(boolean bProxy, String pcIp) {
    return MtcCliDbJNI.Mtc_CliDbSetSipServIp(bProxy, pcIp);
  }

/**
 * @brief Get SIP register or proxy server port from database.
 *
 * @note: It can set different REGISTAR and Proxy compare to 
 *        @ref MtcCliDb::Mtc_CliDbSetSipRegUdpPort and @ref MtcCliDb::Mtc_CliDbSetSipRegTcpPort.
 *
 * @param [in] bProxy SIP proxy option.
 *
 * @return Get SIP register or proxy server port.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetSipServPort
 */
  public static int Mtc_CliDbGetSipServPort(boolean bProxy) {
    return MtcCliDbJNI.Mtc_CliDbGetSipServPort(bProxy);
  }

/**
 * @brief Set SIP register or proxy server port.
 *
 * @note: It can set different REGISTAR and Proxy compare to 
 *        @ref MtcCliDb::Mtc_CliDbSetSipRegUdpPort and @ref MtcCliDb::Mtc_CliDbSetSipRegTcpPort.
 *
 * @param [in] bProxy SIP proxy option.
 * @param [in] dwPort SIP register or proxy server port.
 *
 * @retval ZOK Set SIP register or proxy server port successfully.
 * @retval ZFAILED Set SIP register or proxy server port failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetSipServPort
 */
  public static int Mtc_CliDbSetSipServPort(boolean bProxy, int dwPort) {
    return MtcCliDbJNI.Mtc_CliDbSetSipServPort(bProxy, dwPort);
  }

/**
 * @brief Get SIP register or proxy server port from database.
 *
 * @param [in] bProxy SIP proxy option.
 * @param [in] ucTpt SIP register or proxy server transport protocal type.
 *
 * @return Get SIP register or proxy server port.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetSipServPort, @ref MtcCliDb::Mtc_CliDbSetSipServPort, @ref MtcCliDb::Mtc_CliDbSetSipServPortX
 */
  public static int Mtc_CliDbGetSipServPortX(boolean bProxy, short ucTpt) {
    return MtcCliDbJNI.Mtc_CliDbGetSipServPortX(bProxy, ucTpt);
  }

/**
 * @brief Get SIP register or proxy server port.
 *
 * @param [in] bProxy SIP proxy option.
 * @param [in] ucTpt SIP register or proxy server transport protocal type.
 * @param [in] dwPort SIP register or proxy server port.
 *
 * @retval ZOK Set SIP register or proxy server port successfully.
 * @retval ZFAILED Set SIP register or proxy server port failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetSipServPort, @ref MtcCliDb::Mtc_CliDbSetSipServPort, @ref MtcCliDb::Mtc_CliDbGetSipServPortX
 */
  public static int Mtc_CliDbSetSipServPortX(boolean bProxy, short ucTpt, int dwPort) {
    return MtcCliDbJNI.Mtc_CliDbSetSipServPortX(bProxy, ucTpt, dwPort);
  }

/**
 * @brief Get SIP register or proxy server transport protocol type from database.
 *
 * @note: It can set different REGISTAR and Proxy compare to @ref MtcCliDb::Mtc_CliDbGetSipRegTpt.
 *
 * @param [in] bProxy SIP proxy option.
 *
 * @return Get SIP register or proxy server transport protocol type.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetSipServTpt
 */
  public static short Mtc_CliDbGetSipServTpt(boolean bProxy) {
    return MtcCliDbJNI.Mtc_CliDbGetSipServTpt(bProxy);
  }

/**
 * @brief Set SIP register or proxy server transport protocal type.
 *
 * @note: It can set different REGISTAR and Proxy compare to @ref MtcCliDb::Mtc_CliDbSetSipRegTpt.
 *
 * @param [in] bProxy SIP proxy option.
 * @param [in] ucTpt SIP register or proxy server transport protocal type.
 *
 * @retval ZOK Set SIP register or proxy server transport protocal type successfully.
 * @retval ZFAILED Set SIP register or proxy server transport protocal type failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetSipServTpt
 */
  public static int Mtc_CliDbSetSipServTpt(boolean bProxy, short ucTpt) {
    return MtcCliDbJNI.Mtc_CliDbSetSipServTpt(bProxy, ucTpt);
  }

/**
 * @brief Get SIP register or proxy server realm from database.
 *
 * @note: It can set different REGISTAR and Proxy compare to @ref MtcCliDb::Mtc_CliDbGetSipRegRealm.
 *
 * @param [in] bProxy SIP proxy option.
 *
 * @return Get SIP register or proxy server realm.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetSipServRealm
 */
  public static String Mtc_CliDbGetSipServRealm(boolean bProxy) {
    return MtcCliDbJNI.Mtc_CliDbGetSipServRealm(bProxy);
  }

/**
 * @brief Set SIP register or proxy server realm.
 *
 * @note: It can set different REGISTAR and Proxy compare to @ref MtcCliDb::Mtc_CliDbSetSipRegRealm.
 *
 * @param [in] bProxy SIP proxy option.
 * @param [in] pcRealm SIP register or proxy server realm.
 *
 * @retval ZOK Set SIP register or proxy server realm successfully.
 * @retval ZFAILED Set SIP register or proxy server realm failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetSipServRealm
 */
  public static int Mtc_CliDbSetSipServRealm(boolean bProxy, String pcRealm) {
    return MtcCliDbJNI.Mtc_CliDbSetSipServRealm(bProxy, pcRealm);
  }

/**
 * @brief Get register service type.
 *
 * @return Get register service type. Service type @ref MtcCliDbConstants::EN_MTC_REG_SRV_VOIP. 
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetRegSrvType
 */
  public static int Mtc_CliDbGetRegSrvType() {
    return MtcCliDbJNI.Mtc_CliDbGetRegSrvType();
  }

/**
 * @brief Set register service type.
 *
 * @param [in] iType The register service type. 
 *             Service type @ref MtcCliDbConstants::EN_MTC_REG_SRV_VOIP. 
 *
 * @retval ZOK Set register service type successfully.
 * @retval ZFAILED Set register service type failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetRegSrvType
 */
  public static int Mtc_CliDbSetRegSrvType(int iType) {
    return MtcCliDbJNI.Mtc_CliDbSetRegSrvType(iType);
  }

/**
 * @brief Get register retry count while starting REGISTER.
 *
 * @return Get register retry count.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetRegRetryCount
 */
  public static int Mtc_CliDbGetRegRetryCount() {
    return MtcCliDbJNI.Mtc_CliDbGetRegRetryCount();
  }

/**
 * @brief Set register retry count while starting REGISTER.
 *
 * @param [in] iCount The register retry count .
 *
 * @retval ZOK Set register retry count successfully.
 * @retval ZFAILED Set register retry count failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetRegRetryCount
 */
  public static int Mtc_CliDbSetRegRetryCount(int iCount) {
    return MtcCliDbJNI.Mtc_CliDbSetRegRetryCount(iCount);
  }

/**
 * @brief Get subscribe register event option after successful REGISTER.
 *
 * @return Get subscribe register event enable option.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetSubsRegEvnt
 */
  public static boolean Mtc_CliDbGetSubsRegEvnt() {
    return MtcCliDbJNI.Mtc_CliDbGetSubsRegEvnt();
  }

/**
 * @brief Set subscribe register event option after successful REGISTER.
 *
 * @param [in] bSubs Support subscribe register event.
 *
 * @retval ZOK Set subscribe register event option successfully.
 * @retval ZFAILED Set subscribe register event option failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetSubsRegEvnt
 */
  public static int Mtc_CliDbSetSubsRegEvnt(boolean bSubs) {
    return MtcCliDbJNI.Mtc_CliDbSetSubsRegEvnt(bSubs);
  }

/**
 * @brief Get access network type.
 *
 * @return Get access network type. Network type @ref MtcCliDbConstants::EN_MTC_ACC_NET_UNKNOWN.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetAccNetType
 */
  public static int Mtc_CliDbGetAccNetType() {
    return MtcCliDbJNI.Mtc_CliDbGetAccNetType();
  }

/**
 * @brief Set access network type.
 *
 * @param [in] iType The access network type. 
 *             Network type @ref MtcCliDbConstants::EN_MTC_ACC_NET_UNKNOWN. 
 *
 * @retval ZOK Set access network type successfully.
 * @retval ZFAILED Set access network type failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetAccNetType
 */
  public static int Mtc_CliDbSetAccNetType(int iType) {
    return MtcCliDbJNI.Mtc_CliDbSetAccNetType(iType);
  }

/**
 * @brief Get access network info.
 *
 * @return Get access network info.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetAccNetInfo
 */
  public static String Mtc_CliDbGetAccNetInfo() {
    return MtcCliDbJNI.Mtc_CliDbGetAccNetInfo();
  }

/**
 * @brief Set access network info.
 *
 * @param [in] pcInfo Access network info.
 *             The info should set right value according to 
 *             3GPP TS24.229[7.2A.4.3]
 *
 * @retval ZOK Set access network info successfully.
 * @retval ZFAILED Set access network info failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetAccNetInfo
 */
  public static int Mtc_CliDbSetAccNetInfo(String pcInfo) {
    return MtcCliDbJNI.Mtc_CliDbSetAccNetInfo(pcInfo);
  }

/**
 * @brief Get the format (SIP URI or tel URI) to be used when the callee 
 *  numbering is dialled in national format.
 *
 * @return Uri format type, @see @ref MtcCliDbConstants::EN_MTC_URI_FMT_TEL.
 */
  public static int Mtc_CliDbGetNatUriFmt() {
    return MtcCliDbJNI.Mtc_CliDbGetNatUriFmt();
  }

/**
 * @brief Get the format (SIP URI or tel URI) to be used when the callee 
 *  numbering is dialled in international format.
 *
 * @return Uri format type, @see @ref MtcCliDbConstants::EN_MTC_URI_FMT_TEL.
 */
  public static int Mtc_CliDbGetIntUriFmt() {
    return MtcCliDbJNI.Mtc_CliDbGetIntUriFmt();
  }

/**
 * @brief Get a sip.instance which is required for the sip.instance multidevice approach.
 *
 * @return a string containing the sip.instance.
 */
  public static String Mtc_CliDbGetSipInstance() {
    return MtcCliDbJNI.Mtc_CliDbGetSipInstance();
  }

/**
 * @brief Get the Q-value to be put in the Contact header of the Register method.
 *
 * @return Q-value, including '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'.
 */
  public static String Mtc_CliDbGetQValue() {
    return MtcCliDbJNI.Mtc_CliDbGetQValue();
  }

/**
 * @brief Get archive server address.
 *
 * @return a string of archive server address.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetAcvServAddr
 */
  public static String Mtc_CliDbGetAcvServAddr() {
    return MtcCliDbJNI.Mtc_CliDbGetAcvServAddr();
  }

/**
 * @brief Set archive server address.
 *
 * @param [in] pcServAddr Archive server address.

 * @retval ZOK Set successfully.
 * @retval ZFAILED Set failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetAcvServAddr
 */
  public static int Mtc_CliDbSetAcvServAddr(String pcServAddr) {
    return MtcCliDbJNI.Mtc_CliDbSetAcvServAddr(pcServAddr);
  }

/**
 * @brief Get archive server url.
 *
 * @return a string of archive server url.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetAcvUrl
 */
  public static String Mtc_CliDbGetAcvUrl() {
    return MtcCliDbJNI.Mtc_CliDbGetAcvUrl();
  }

/**
 * @brief Set archive server url.
 *
 * @param [in] pcUrl Archive server url.

 * @retval ZOK Set successfully.
 * @retval ZFAILED Set failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetAcvUrl
 */
  public static int Mtc_CliDbSetAcvUrl(String pcUrl) {
    return MtcCliDbJNI.Mtc_CliDbSetAcvUrl(pcUrl);
  }

/**
 * @brief Get archive server port.
 *
 * @return archive server port.
 *
 * @see @ref MtcCliDb::Mtc_CliDbSetAcvServPort
 */
  public static int Mtc_CliDbGetAcvServPort() {
    return MtcCliDbJNI.Mtc_CliDbGetAcvServPort();
  }

/**
 * @brief Set archive server port.
 *
 * @param [in] wPort Archive server port.

 * @retval ZOK Set successfully.
 * @retval ZFAILED Set failed.
 *
 * @see @ref MtcCliDb::Mtc_CliDbGetAcvServPort
 */
  public static int Mtc_CliDbSetAcvServPort(int wPort) {
    return MtcCliDbJNI.Mtc_CliDbSetAcvServPort(wPort);
  }

}
