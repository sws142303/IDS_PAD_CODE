/**
 * @file MtcCli.java
 * @brief MtcCli interface
 */
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.juphoon.lemon;

/**
 * @brief MtcCli interface
 */
public class MtcCli implements MtcCliConstants {
/**
 * @brief Initialize Client Resource.
 *
 * @param [in] pcProfDir Profile directory
 *
 * @retval ZOK Initialize client resource successfully.
 * @retval MTC_LCS_ERR_NEED_ACT_LICSEN, Initialize client resource failed, 
 * you should call Mtc_lcsActivate activate licenser .
 * &retval ZFAILED, Initialize client resource failed.
 * @see @ref MtcCli::Mtc_CliDestroy
 * Mtc_CliCfgSetLicenseFileName first
 */
  public static int Mtc_CliInit(String pcProfDir) {
    return MtcCliJNI.Mtc_CliInit(pcProfDir);
  }

/**
 * @brief Destroy Client Resource.
 *
 * @see @ref MtcCli::Mtc_CliInit
 */
  public static void Mtc_CliDestroy() {
    MtcCliJNI.Mtc_CliDestroy();
  }

/**
 * @brief Open a account.
 *
 * @param [in] pcUserName The account name.
 * If account name is ZNULL, it will load default profile information.
 * For change parameter, call @ref MtcCliDb::Mtc_CliDbSetLocalIp etc functions.
 *
 * @retval ZOK Open a account successfully.
 * @retval ZFAILED Initialize a account failed.
 *
 * @see @ref MtcCli::Mtc_CliClose
 */
  public static int Mtc_CliOpen(String pcUserName) {
    return MtcCliJNI.Mtc_CliOpen(pcUserName);
  }

/**
 * @brief Close current account.
 *
 * @see @ref MtcCli::Mtc_CliOpen
 */
  public static void Mtc_CliClose() {
    MtcCliJNI.Mtc_CliClose();
  }

/**
 * @brief Start Client Service.
 *
 * @retval ZOK Start client service successfully.
 * @retval ZFAILED Start client service failed.
 *
 * @see @ref MtcCli::Mtc_CliStop
 */
  public static int Mtc_CliStart() {
    return MtcCliJNI.Mtc_CliStart();
  }

/**
 * @brief Stop Client Service.
 *
 * @see @ref MtcCli::Mtc_CliStart
 */
  public static void Mtc_CliStop() {
    MtcCliJNI.Mtc_CliStop();
  }

/**
 * @brief Start to Login Client.
 * 
 * @param [in] iAccNetType The access network type EN_MTC_ANET_TYPE.
 * @param [in] pcAccNetIp The access network IP string.
 * If @ref MtcCliDb::Mtc_CliDbGetUserReg returns true, Login result notified by callbacks 
 * which were set by @ref mtcCliCbRegOk, @ref mtcCliCbRegFailed, 
 * @ref mtcCliCbServLoginOk or @ref mtcCliCbLclLoginOk
 * or @ref mtcCliCbLoginFailed or mtcCliCbAuthInd. 
 * Otherwise, it means client needn't login to remote server,
 * and will return immediately without any GUI callback.
 *
 * @retval ZOK Client is logining.
 * @retval ZFAILED Client login failed.
 *
 * @see @ref MtcCli::Mtc_CliLogout
 */
  public static int Mtc_CliLogin(int iAccNetType, String pcAccNetIp) {
    return MtcCliJNI.Mtc_CliLogin(iAccNetType, pcAccNetIp);
  }

/**
 * @brief Enter aka response to Login Client again.
 * 
 * If @ref MtcCliDb::Mtc_CliDbGetAuthType returns EN_MTC_IMS_AUTH_IMS_AKA, 
 * Login result will be notified by callback which was set by
 * @ref mtcCliCbAuthInd, then client must enter aka response to login again.
 *
 * @retval ZOK Client is logining.
 * @retval ZFAILED Client login failed.
 *
 * @see @ref MtcCli::Mtc_CliLogout
 */
  public static int Mtc_CliEnterAkaRsp(int iCookie, String pcRsp, String pcCk, String pcIk, String pcAuts) {
    return MtcCliJNI.Mtc_CliEnterAkaRsp(iCookie, pcRsp, pcCk, pcIk, pcAuts);
  }

/**
 * @brief Enter digest password to Login Client again.
 * 
 * If @ref MtcCliDb::Mtc_CliDbGetAuthType returns EN_MTC_IMS_AUTH_SIP_DIGEST, 
 * Login result will be notified by callback which was set by 
 * @ref mtcCliCbAuthInd if no password was avaliable before, 
 * then client must enter digest password to login again.
 *
 * @retval ZOK Client is logining.
 * @retval ZFAILED Client login failed.
 *
 * @see @ref MtcCli::Mtc_CliLogout
 */
  public static int Mtc_CliEnterDgstPwd(int iCookie, String pcPwd) {
    return MtcCliJNI.Mtc_CliEnterDgstPwd(iCookie, pcPwd);
  }

/**
 * @brief Refresh the registration.
 * 
 * This interface is try to send re-REGISTRE message to refresh the
 * registration information on the server. Although the SDK will send 
 * re-REGISTER automatically accroding to the expire time length, there still
 * be in some condition which the client wants to send re-REGISTER to keep
 * registration information valid. Like on mobile phone platfrom, the 
 * SDK may not be able to send re-REGISTER on time during background mode.
 * In these cases, the application should invoke this interface to send
 * re-REGISTER manually to discover errors maybe occured during background mode.
 * This interface must only be invoked after client has logined,
 * @ref mtcCliCbLclLoginOk.
 *
 * @retval ZOK Client send re-REGISTER ok.
 * @retval ZFAILED Client send re-REGISTER failed.
 *
 * @see @ref MtcCli::Mtc_CliLogin @ref MtcCli::Mtc_CliLogout
 */
  public static int Mtc_CliRefresh() {
    return MtcCliJNI.Mtc_CliRefresh();
  }

/**
 * @brief Start to Logout Client.
 *
 * If Mtc_DbGetUserReg returns true, Logout result will be notified by 
 * callbacks which were set by @ref mtcCliCbLclLogout and @ref mtcCliCbServLogout. 
 *
 * @retval ZOK Client is logouting.
 * @retval ZFAILED Client logout failed.
 *
 * @see @ref MtcCli::Mtc_CliLogin
 */
  public static int Mtc_CliLogout() {
    return MtcCliJNI.Mtc_CliLogout();
  }

/**
 * @brief Send INFO, Options or Page message.
 *
 * @param [in] zCookie User cookie value.
 * @param [in] pcUri The destination URI to which you want to send a message.
 * @param [in] iMsgType User message type(@ref EN_MTC_UMSG_TYPE).
 * @param [in] pcBodyType Body type string, ZNULL for "plain".
 * @param [in] pcMsgBody sip info, iptions or page message body string.
 *
 * @retval ZOK Send info ok.
 * @retval ZFAILED Send info failed.
 */
  public static int Mtc_CliSendUserMsg(Object zCookie, String pcUri, int iMsgType, String pcBodyType, String pcMsgBody) {
    return MtcCliJNI.Mtc_CliSendUserMsg(zCookie, pcUri, iMsgType, pcBodyType, pcMsgBody);
  }

/**
 * @brief Get User Register State.
 *
 * @return Register State. State see @ref MTC_REG_STATE_IDLE...
 */
  public static int Mtc_CliGetRegState() {
    return MtcCliJNI.Mtc_CliGetRegState();
  }

/**
 * @brief Client Drive Service.
 *
 * MTC service was implemented by MSF, for multi-thread mode,
 * MSF is running in independent thread, GUI is another one generally.
 * MTC implmented service login in GUI, so it is running in GUI.
 * When MSF need notify status to GUI, the event should transfered in 
 * two threads. For thread safety, service event was posted by 
 * GUI callback @ref mtcCliCbEvnt from MSF to GUI. 
 * Then GUI drive MTC by this service event.
 *
 * @param [in] zEvntId Service Event from RSD.
 *
 * @retval ZOK Drive Service successfully.
 * @retval ZFAILED Drive Service failed.
 *
 */
  public static int Mtc_CliDrive(int zEvntId) {
    return MtcCliJNI.Mtc_CliDrive(zEvntId);
  }

/**
 * @brief Detect available local IP address.
 *   It is available in register mode.
 *
 *   If user open it by @ref MtcCliCfg::Mtc_CliCfgSetUseDetLclIp, Client will automatic
 *   call it before start services and login.
 * 
 * @return Available local IP detected.
 */
  public static int Mtc_CliDetLclIp() {
    return MtcCliJNI.Mtc_CliDetLclIp();
  }

/**
 * @brief Get Device Id string.
 *
 * @return Device Id string.
 */
  public static String Mtc_CliGetDevId() {
    return MtcCliJNI.Mtc_CliGetDevId();
  }

/**
 * @brief Download mmp file.
 *
 * @retval ZOK Download mmp file successfully.
 * @retval ZFAILED Download mmp file failed.
 */
  public static int Mtc_CliDownloadMmp() {
    return MtcCliJNI.Mtc_CliDownloadMmp();
  }

}
