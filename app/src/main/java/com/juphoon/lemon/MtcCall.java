/**
 * @file MtcCall.java
 * @brief MtcCall interface
 */
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.juphoon.lemon;

import cn.sword.SDK.MediaEngine;

/**
 * @brief MtcCall interface
 */
public class MtcCall implements MtcCallConstants {
/** 
 * @brief MTC Call, establishing session call with video or audio.
 *
 * If send a new call and the callee answered, GUI will be notified by callback which 
 * was set by @ref mtcCallCbAlerted, @ref mtcCallCbTalking
 *
 * If send a new call and the callee redirected, GUI will be notified by callback which 
 * was set by @ref mtcCallCbOutgoing, @ref mtcCallCbAlerted, @ref mtcCallCbTalking
 *
 * If send a new call and the callee do not answered(timeout, busy now, etc.), GUI will be 
 * notified by callback which was set by @ref mtcCallCbAlerted, @ref mtcCallCbTermed
 *
 * While receiving call invitation, GUI will be notified by callback which 
 * was set by @ref mtcCallCbIncoming.
 *
 * While receiving call invitation and session is exist, GUI will be notified by callback which 
 * was set by @ref mtcCallCbReplaced.
 *
 * @param [in] pcUri The destination URI to which you want to make a session call.
 * @param [in] zCookie Used to correspond session with UI resource. The cookie
 *                      value could be get by @ref MtcCall::Mtc_SessGetCookie or reset by
 *                      @ref MtcCall::Mtc_SessSetCookie at any time of session's life.
 * @param [in] bAudio Indicate whether this call has a voice stream.
 * @param [in] bVideo Indicate whether this call has a video stream.
 *
 * @return The id of this new created session on succeed, otherwise return ZMAXULONG.
 *
 * @see @ref MtcCall::Mtc_SessAnswer, @ref MtcCall::Mtc_SessGetCookie, @ref MtcCall::Mtc_SessSetCookie
 */
  public static int Mtc_SessCall(String pcUri, Object zCookie, boolean bAudio, boolean bVideo) {
    return MtcCallJNI.Mtc_SessCall(pcUri, zCookie, bAudio, bVideo);
  }

/** 
 * @brief MTC Call, establishing session call with video or audio.
 *
 * If send a new call and the callee answered, GUI will be notified by 
 * callback which was set by @ref mtcCallCbAlerted, @ref mtcCallCbTalking
 *
 * If send a new call and the callee redirected, GUI will be notified by callback which 
 * was set by @ref mtcCallCbOutgoing, @ref mtcCallCbAlerted, @ref mtcCallCbTalking
 *
 * If send a new call and the callee do not answered(timeout, busy now, etc.), GUI will be 
 * notified by callback which was set by @ref mtcCallCbAlerted, @ref mtcCallCbTermed
 *
 * While receiving call invitation, GUI will be notified by callback which 
 * was set by @ref mtcCallCbIncoming.
 *
 * While receiving call invitation and session is exist, GUI will be notified by callback which 
 * was set by @ref mtcCallCbReplaced.
 *
 * @param [in] pcUri The destination URI to which you want to make a session call.
 * @param [in] zCookie Used to correspond session with UI resource. The cookie
 *                      value could be get by @ref MtcCall::Mtc_SessGetCookie or reset by
 *                      @ref MtcCall::Mtc_SessSetCookie at any time of session's life.
 * @param [in] bAudio Indicate whether this call has a voice stream.
 * @param [in] bVideo Indicate whether this call has a video stream.
 * @param [in] bSend Indicate whether this call start to send after established.
 * @param [in] bRecv Indicate whether this call start to receive after established.
 *
 * @return The id of this new created session on succeed, otherwise return ZMAXULONG.
 *
 * @see @ref MtcCall::Mtc_SessAnswer, @ref MtcCall::Mtc_SessGetCookie, @ref MtcCall::Mtc_SessSetCookie
 */
  public static int Mtc_SessCallX(String pcUri, Object zCookie, boolean bAudio, boolean bVideo, boolean bSend, boolean bRecv) {
    return MtcCallJNI.Mtc_SessCallX(pcUri, zCookie, bAudio, bVideo, bSend, bRecv);
  }

/** 
 * @brief MTC session alert an incoming session.
 *
 * @param [in] dwSessId The id of incoming session which you want answer.
 * @param [in] zCookie Used to correspond session with UI resource. The cookie
 *                      value could be get by Rse_SessGetCookie or reset by
 *                      Rse_SessSetCookie at any time of session's life.
 * @param [in] dwType Alert type, EN_MTF_ALERT_TYPE.
 * @param [in] bReliable If true, message will be sending as reliable
 *                      provisional response.
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 *
 * @see @ref MtcCall::Mtc_SessCall, @ref MtcCall::Mtc_SessGetCookie, @ref MtcCall::Mtc_SessSetCookie
 */
  public static int Mtc_SessAlert(int dwSessId, Object zCookie, int dwType, boolean bReliable) {
    return MtcCallJNI.Mtc_SessAlert(dwSessId, zCookie, dwType, bReliable);
  }

/** 
 * @brief MTC session answer an incoming session call which is notified by
 *        callback function which was set by @ref mtcCallCbIncoming.
 *
 * @param [in] dwSessId The id of incoming session which you want to answer.
 * @param [in] zCookie Used to correspond session with UI resource. The cookie
 *                      value could be get by @ref MtcCall::Mtc_SessGetCookie or reset by
 *                      @ref MtcCall::Mtc_SessSetCookie at any time of session's life.
 * @param [in] bAudio Indicate whether this call has a voice stream.
 * @param [in] bVideo Indicate whether this call has a video stream.
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 *
 * @see @ref MtcCall::Mtc_SessCall, @ref mtcCallCbIncoming, @ref MtcCall::Mtc_SessGetCookie, @ref MtcCall::Mtc_SessSetCookie
 */
  public static int Mtc_SessAnswer(int dwSessId, Object zCookie, boolean bAudio, boolean bVideo) {
    return MtcCallJNI.Mtc_SessAnswer(dwSessId, zCookie, bAudio, bVideo);
  }
  public static boolean Mtc_SessAnswer(int dwSessId,boolean bVideo){
	  MediaEngine.GetInstance().ME_Answer(dwSessId,bVideo);
	  return true;
  }
/** 
 * @brief MTC session terminate.
 *
 * @param [in] dwSessId The ID of session which you want to terminate.
 * @param [in] dwReason Indicate the terminate reason which may trigger some
 *                   service in S-CSCF, see @ref MtcCallConstants::EN_MTC_CALL_TERM_REASON_NORMAL.
 * @param [in] pcDesc Detail description string.
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 *
 * Actually Mtc_SessTerm does not free all resource allocated for this
 * session. It only starts a terminating procedure. All resource will be
 * freed automatically when the procedure ends.
 *
 * @see @ref MtcCall::Mtc_SessCall, @ref MtcCall::Mtc_SessAnswer...
 */
  public static int Mtc_SessTerm(int dwSessId, int dwReason, String pcDesc) {
    return MtcCallJNI.Mtc_SessTerm(dwSessId, dwReason, pcDesc);
  }

/** 
 * @brief MTC session hold.
 *
 * If sending session hold successfully, GUI will be notified by callback which 
 * was set by @ref mtcCallCbHoldOk
 *
 * If sending session hold failed, GUI will be notified by callback which 
 * was set by @ref mtcCallCbHoldFailed
 *
 * While receiving session held, GUI will be notified by callback which 
 * was set by @ref mtcCallCbHeld.
 *
 * @param [in] dwSessId The ID of session which you want to hold.
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 *
 * @see @ref MtcCall::Mtc_SessUnhold
 */
  public static int Mtc_SessHold(int dwSessId) {
    return MtcCallJNI.Mtc_SessHold(dwSessId);
  }

/** 
 * @brief MTC session unhold.
 *
 * If sending session unhold successfully, GUI will be notified by callback which 
 * was set by @ref mtcCallCbUnHoldOk
 *
 * If sending session hold failed, GUI will be notified by callback which 
 * was set by @ref mtcCallCbUnHoldFailed
 *
 * While receiving session unheld, GUI will be notified by callback which 
 * was set by @ref mtcCallCbUnHeld.
 *
 * @param [in] dwSessId The ID of session which you want to unhold.
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 *
 * @see @ref MtcCall::Mtc_SessUnhold
 */
  public static int Mtc_SessUnhold(int dwSessId) {
    return MtcCallJNI.Mtc_SessUnhold(dwSessId);
  }

/** 
 * @brief MTC session unattended transfer.
 *
 * If unattended transfer successfully, GUI will be notified by callback which 
 * was set by @ref mtcCallCbTrsfAcpt
 *
 * If unattended transfer failed, GUI will be notified by callback which 
 * was set by @ref mtcCallCbTrsfFailed, @ref mtcCallCbTrsfTerm
 *
 * while receiving unattended transfer, GUI will be notified by callback which 
 * was set by @ref mtcCallCbRefered
 *
 * @param [in] dwSessId The ID of session which you want to make unattended transfer.
 * @param [in] pcUri The destination URI to which you want to transfer this session.
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 *
 * After this operation, the session will be terminated by server.
 *
 * @see @ref MtcCall::Mtc_SessATrsf
 */
  public static int Mtc_SessUTrsf(int dwSessId, String pcUri) {
    return MtcCallJNI.Mtc_SessUTrsf(dwSessId, pcUri);
  }

/** 
 * @brief MTC session attended transfer.
 *
 * If attended transfer successfully, GUI will be notified by callback which 
 * was set by @ref mtcCallCbTrsfAcpt
 *
 * If attended transfer failed, GUI will be notified by callback which 
 * was set by @ref mtcCallCbTrsfFailed, @ref mtcCallCbTrsfTerm
 *
 * while receiving attended transfer, GUI will be notified by callback which 
 * was set by @ref mtcCallCbRefered
 *
 * @param [in] dwSessId The ID of session which you want to make attended transfer.
 * @param [in] dwTrsfSessId The destination session to which you want to transfer
 *                          this session.
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 *
 * If you have a session with user A(indicated by dwSessId) and a session with
 * user B(indicated by dwTrsfSessId), the result of attended transfer is A will
 * have a session with B and all sessions you had with A and B will be terminated.
 *
 * @see @ref MtcCall::Mtc_SessUTrsf
 */
  public static int Mtc_SessATrsf(int dwSessId, int dwTrsfSessId) {
    return MtcCallJNI.Mtc_SessATrsf(dwSessId, dwTrsfSessId);
  }

/** 
 * @brief MTC session diverse an incoming session call which is notified by
 *        callback function which was set by @ref mtcCallCbIncoming.
 *
 * While receiving forwarded, GUI will be notified by callback which 
 * was set by @ref mtcCallCbRedirected.
 *
 * @param [in] dwSessId The ID of session which you want to diverse.
 * @param [in] pcUri The URI of diverse destination.
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 *
 * @see @ref mtcCallCbIncoming
 */
  public static int Mtc_SessDiv(int dwSessId, String pcUri) {
    return MtcCallJNI.Mtc_SessDiv(dwSessId, pcUri);
  }

/** 
 * @brief MTC session send a media update request to peer. The update in this
 *        function means open a new media stream or close an already exist
 *        media stream.
 *
 * If sending update successfully, GUI will be notified by callback which  was set by 
 * @ref mtcCallCbAddAudioOk, @ref mtcCallCbRmvAudioOk, @ref mtcCallCbAddVideoOk,
 * @ref mtcCallCbRmvVideoOk
 *
 * If sending update failed, GUI will be notified by callback which was set by 
 * @ref mtcCallCbAddAudioFailed, @ref mtcCallCbRmvAudioFailed, @ref mtcCallCbAddVideoFailed,
 * @ref mtcCallCbRmvVideoFailed
 *
 * While receiving update, GUI will be notified by callback which  was set by 
 * @ref mtcCallCbAddAudioReq, @ref mtcCallCbAddVideoReq.
 *
 * @param [in] dwSessId The ID of session which you want to update its media.
 * @param [in] bAudio Indicate whether you want to have a audio stream after
 *                    update.
 * @param [in] bVideo Indicate whether you want to have a video stream after
 *                    update.
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 *
 * If the update request is accepted by peer, an indication will arise
 * through the callback function which was set by @ref mtcCallCbMdfyAcpt.
 *
 * @see @ref MtcCall::Mtc_SessUpdateRsp, @ref mtcCallCbMdfyAcpt
 */
  public static int Mtc_SessUpdate(int dwSessId, boolean bAudio, boolean bVideo) {
    return MtcCallJNI.Mtc_SessUpdate(dwSessId, bAudio, bVideo);
  }

/** 
 * @brief MTC session response a media update request from peer. The update
 *        in this function means open a new media stream or close an already
 *        exist media stream.
 *
 * If sending negotiate successfully, GUI will be notified by callback which  was set by 
 * @ref mtcCallCbMdfyed
 *
 * @param [in] dwSessId The ID of session which you want to accept the update
 *                      of its media.
 * @param [in] bAudio Indicate whether you want to have a audio stream after
 *                    update.
 * @param [in] bVideo Indicate whether you want to have a video stream after
 *                    update.
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 *
 * @see @ref MtcCall::Mtc_SessUpdate, @ref mtcCallCbMdfyReq
 */
  public static int Mtc_SessUpdateRsp(int dwSessId, boolean bAudio, boolean bVideo) {
    return MtcCallJNI.Mtc_SessUpdateRsp(dwSessId, bAudio, bVideo);
  }

/** 
 * @brief MTC PickUp, establishing session call with video or audio 
          by replacing specific call.
 *
 * If the new session call was accept by callee, GUI will be notified by 
   callback which was set by @ref mtcCallCbTalking.
 *
 * If the new session call was reject by callee or no answer, GUI will be 
   notified by callback which was set by @ref mtcCallCbTermed.
 *
 * @param [in] pcUri The destination URI to which you want to make a session call.
 * @param [in] pcReplaceInfo The replace information used to locate replaced call.
                     The format must comply with RFC3891, 
                     like '425928@phone.example.org;to-tag=7743;from-tag=6472'.
 * @param [in] zCookie Used to correspond session with UI resource. The cookie
 *                      value could be get by @ref MtcCall::Mtc_SessGetCookie or reset by
 *                      @ref MtcCall::Mtc_SessSetCookie at any time of session's life.
 * @param [in] bAudio Indicate whether this call has a voice stream.
 * @param [in] bVideo Indicate whether this call has a video stream.
 *
 * @return The id of this new created session on succeed, otherwise return ZMAXULONG.
 *
 * @see @ref MtcCall::Mtc_SessPickUpX
 */
  public static int Mtc_SessPickUp(String pcUri, String pcReplaceInfo, Object zCookie, boolean bAudio, boolean bVideo) {
    return MtcCallJNI.Mtc_SessPickUp(pcUri, pcReplaceInfo, zCookie, bAudio, bVideo);
  }

/** 
 * @brief MTC session PickUp, establishing session call with video or audio 
          by replacing specific call.
 *
 * @param [in] dwSessId The session ID indication which session to be pick up.
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 *
 * @see @ref MtcCall::Mtc_SessPickUp
 */
  public static int Mtc_SessPickUpX(int dwSessId) {
    return MtcCallJNI.Mtc_SessPickUpX(dwSessId);
  }

/** 
 * @brief MTC session send DTMF info.
 *
 * @param [in] dwSessId The ID of session which you want to send DTMF info.
 * @param [in] dwDtmfType DTMF type which will be sent, see @ref MtcCallConstants::EN_MTC_CALL_DTMF_0.
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 */
  public static int Mtc_SessDtmf(int dwSessId, int dwDtmfType) {
    return MtcCallJNI.Mtc_SessDtmf(dwSessId, dwDtmfType);
  }

/** 
 * @brief MTC session send INFO with text.
 *
 * @param [in] dwSessId The ID of session which you want to send INFO.
 * @param [in] pcInfo Text string carried by INFO.
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 */
  public static int Mtc_SessInfo(int dwSessId, String pcInfo) {
    return MtcCallJNI.Mtc_SessInfo(dwSessId, pcInfo);
  }

/** 
 * @brief MTC session set preview area.
 *
 * @param [in] dwSessId The ID of session.
 * @param [in] dwHandle The handle of window in which show local image.
 * @param [in] wX The topleft's X value of local image.
 * @param [in] wY The topleft's Y value of local image.
 * @param [in] wWidth The width of local image.
 * @param [in] wHeight The height of local image.
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 */
  public static int Mtc_SessPreviewSetArea(int dwSessId, Object dwHandle, short wX, short wY, int wWidth, int wHeight) {
    return MtcCallJNI.Mtc_SessPreviewSetArea(dwSessId, dwHandle, wX, wY, wWidth, wHeight);
  }

/** 
 * @brief MTC session show or hide preview image.
 *
 * @param [in] dwSessId The ID of session.
 * @param [in] bShow true to show image, false to hide.
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 */
  public static int Mtc_SessPreviewShow(int dwSessId, boolean bShow) {
    return MtcCallJNI.Mtc_SessPreviewShow(dwSessId, bShow);
  }

/** 
 * @brief MTC session attach camera.
 *
 * @param [in] dwSessId The ID of session.
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 */
  public static int Mtc_SessCameraAttach(int dwSessId) {
    return MtcCallJNI.Mtc_SessCameraAttach(dwSessId);
  }

/** 
 * @brief MTC session detach camera.
 *
 * @param [in] dwSessId The ID of session.
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 */
  public static int Mtc_SessCameraDetach(int dwSessId) {
    return MtcCallJNI.Mtc_SessCameraDetach(dwSessId);
  }

/** 
 * @brief MTC session reset the render area setting of remote images.
 *
 * @param [in] dwSessId The ID of session.
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 */
  public static int Mtc_SessRenderReset(int dwSessId) {
    return MtcCallJNI.Mtc_SessRenderReset(dwSessId);
  }

/** 
 * @brief MTC session set render area of remote image.
 *
 * @param [in] dwSessId The ID of session.
 * @param [in] dwHandle The handle of window in which show remote image.
 * @param [in] wX The topleft's X value of remote image.
 * @param [in] wY The topleft's Y value of remote image.
 * @param [in] wWidth The width of remote image.
 * @param [in] wHeight The height of remote image.
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 */
  public static int Mtc_SessRenderAdd(int dwSessId, Object dwHandle, short wX, short wY, int wWidth, int wHeight) {
    return MtcCallJNI.Mtc_SessRenderAdd(dwSessId, dwHandle, wX, wY, wWidth, wHeight);
  }

/** 
 * @brief MTC session build render for display images.
 *
 * To change render window after invoke @ref MtcCall::Mtc_SessVideoStart, user should do as:
 * -# Invoke @ref MtcCall::Mtc_SessPreviewShow to hide preview.
 * -# Invoke @ref MtcCall::Mtc_SessRenderRelease to release render for display images.
 * -# Invoke @ref MtcCall::Mtc_SessPreviewSetArea to set new display window.
 * -# Invoke @ref MtcCall::Mtc_SessRenderReset to reset the area data.
 * -# Invoke @ref MtcCall::Mtc_SessRenderAdd to add new window handle for remote image.
 * -# Invoke @ref MtcCall::Mtc_SessRenderBuild to rebuild render for display images.
 * -# Invoke @ref MtcCall::Mtc_SessPreviewShow to show preview.
 *
 * @param [in] dwSessId The ID of session.
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 */
  public static int Mtc_SessRenderBuild(int dwSessId) {
    return MtcCallJNI.Mtc_SessRenderBuild(dwSessId);
  }

/** 
 * @brief MTC session release render for display images.
 *
 * To change render window after invoke @ref MtcCall::Mtc_SessVideoStart, user should do as:
 * -# Invoke @ref MtcCall::Mtc_SessPreviewShow to hide preview.
 * -# Invoke @ref MtcCall::Mtc_SessRenderRelease to release render for display images.
 * -# Invoke @ref MtcCall::Mtc_SessPreviewSetArea to set new display window.
 * -# Invoke @ref MtcCall::Mtc_SessRenderReset to reset the area data.
 * -# Invoke @ref MtcCall::Mtc_SessRenderAdd to add new window handle for remote image.
 * -# Invoke @ref MtcCall::Mtc_SessRenderBuild to rebuild render for display images.
 * -# Invoke @ref MtcCall::Mtc_SessPreviewShow to show preview.
 *
 * @param [in] dwSessId The ID of session.
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 */
  public static int Mtc_SessRenderRelease(int dwSessId) {
    return MtcCallJNI.Mtc_SessRenderRelease(dwSessId);
  }

/** 
 * @brief MTC session start video transmission.
 *
 * @param [in] dwSessId The ID of session which you want to start video transmission.
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 */
  public static int Mtc_SessVideoStart(int dwSessId) {
    return MtcCallJNI.Mtc_SessVideoStart(dwSessId);
  }

/** 
 * @brief MTC session stop video transmission.
 *
 * @param [in] dwSessId The ID of session which you want to stop video transmission.
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 */
  public static int Mtc_SessVideoStop(int dwSessId) {
    return MtcCallJNI.Mtc_SessVideoStop(dwSessId);
  }

/** 
 * @brief MTC session pause sending video.
 *
 * @param [in] dwSessId The ID of session which you want to stop video transmission.
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 */
  public static int Mtc_SessVideoPause(int dwSessId) {
    return MtcCallJNI.Mtc_SessVideoPause(dwSessId);
  }

/** 
 * @brief MTC session resume sending video.
 *
 * @param [in] dwSessId The ID of session which you want to stop video transmission.
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 */
  public static int Mtc_SessVideoResume(int dwSessId) {
    return MtcCallJNI.Mtc_SessVideoResume(dwSessId);
  }

/** 
 * @brief MTC session get video size.
 *
 * @param [in] dwSessId The ID of session.
 * @param [out] pdwWidth Video width in pixel of specific session.
 * @param [out] pdwHeight Video height in pixel of specific session.
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 */
  public static int Mtc_SessGetVideoSize(int dwSessId, MtcNumber pdwWidth, MtcNumber pdwHeight) {
    return MtcCallJNI.Mtc_SessGetVideoSize(dwSessId, pdwWidth, pdwHeight);
  }

/** 
 * @brief MTC session get remote video size.
 *
 * @param [in] dwSessId The ID of session.
 * @param [out] pdwWidth Video width in pixel of specific session.
 * @param [out] pdwHeight Video height in pixel of specific session.
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 */
  public static int Mtc_SessGetVideoRemoteSize(int dwSessId, MtcNumber pdwWidth, MtcNumber pdwHeight) {
    return MtcCallJNI.Mtc_SessGetVideoRemoteSize(dwSessId, pdwWidth, pdwHeight);
  }

/** 
 * @brief MTC session get local video size.
 *
 * @param [in] dwSessId The ID of session.
 * @param [out] pdwWidth Video width in pixel of specific session.
 * @param [out] pdwHeight Video height in pixel of specific session.
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 */
  public static int Mtc_SessGetVideoLocalSize(int dwSessId, MtcNumber pdwWidth, MtcNumber pdwHeight) {
    return MtcCallJNI.Mtc_SessGetVideoLocalSize(dwSessId, pdwWidth, pdwHeight);
  }

/** 
 * @brief MTC session check if has a active video stream.
 *
 * @param [in] dwSessId The ID of session.
 *
 * @retval true on yes.
 * @retval false on no.
 *
 * @see @ref MtcCall::Mtc_SessVideoStart, @ref MtcCall::Mtc_SessVideoStop, @ref MtcCall::Mtc_SessHasAudio
 */
  public static boolean Mtc_SessHasVideo(int dwSessId) {
    return MtcCallJNI.Mtc_SessHasVideo(dwSessId);
  }

/** 
 * @brief MTC session check if has a active audio stream.
 *
 * @param [in] dwSessId The ID of session.
 *
 * @retval true on yes.
 * @retval false on no.
 *
 * @see @ref MtcCall::Mtc_SessHasVideo
 */
  public static boolean Mtc_SessHasAudio(int dwSessId) {
    return MtcCallJNI.Mtc_SessHasAudio(dwSessId);
  }

/** 
 * @brief MTC check session has entered in talking state.
 *
 * @param [in] dwSessId The ID of session.
 *
 * @retval true on talking state.
 * @retval false on talking state.
 *
 * @see @ref MtcCall::Mtc_SessCall, @ref MtcCall::Mtc_SessAnswer
 */
  public static boolean Mtc_SessHasTalk(int dwSessId) {
    return MtcCallJNI.Mtc_SessHasTalk(dwSessId);
  }

/** 
 * @brief MTC check session has entered in hold state.
 *
 * @param [in] dwSessId The ID of session.
 *
 * @retval true on hold state.
 * @retval false on hold state.
 *
 * @see @ref MtcCall::Mtc_SessHasHeld
 */
  public static boolean Mtc_SessHasHold(int dwSessId) {
    return MtcCallJNI.Mtc_SessHasHold(dwSessId);
  }

/** 
 * @brief MTC check session has entered in held state.
 *
 * @param [in] dwSessId The ID of session.
 *
 * @retval true on held state.
 * @retval false on held  state.
 *
 * @see @ref MtcCall::Mtc_SessHasHold
 */
  public static boolean Mtc_SessHasHeld(int dwSessId) {
    return MtcCallJNI.Mtc_SessHasHeld(dwSessId);
  }

/** 
 * @brief MTC get the lost ratio in percentage of audio stream.
 *
 * @param [in] dwSessId The ID of session.
 *
 * @return Lost ratio in percentage(0-1000).
 *
 * @see @ref MtcCall::Mtc_SessVideoLostRatio
 */
  public static int Mtc_SessAudioLostRatio(int dwSessId) {
    return MtcCallJNI.Mtc_SessAudioLostRatio(dwSessId);
  }

/** 
 * @brief MTC get the lost ratio in percentage of video stream.
 *
 * @param [in] dwSessId The ID of session.
 *
 * @return Lost ratio in percentage(0-1000).
 *
 * @see @ref MtcCall::Mtc_SessAudioLostRatio
 */
  public static int Mtc_SessVideoLostRatio(int dwSessId) {
    return MtcCallJNI.Mtc_SessVideoLostRatio(dwSessId);
  }

/** 
 * @brief MTC get the lost count of audio stream.
 *
 * @param [in] dwSessId The ID of session.
 *
 * @return Total lost count.
 *
 * @see @ref MtcCall::Mtc_SessVideoLostRatio
 */
  public static int Mtc_SessAudioLostCount(int dwSessId) {
    return MtcCallJNI.Mtc_SessAudioLostCount(dwSessId);
  }

/** 
 * @brief MTC get the lost count of video stream.
 *
 * @param [in] dwSessId The ID of session.
 *
 * @return Total lost count.
 *
 * @see @ref MtcCall::Mtc_SessAudioLostCount
 */
  public static int Mtc_SessVideoLostCount(int dwSessId) {
    return MtcCallJNI.Mtc_SessVideoLostCount(dwSessId);
  }

/** 
 * @brief MTC get the round trip time of audio stream.
 *
 * @param [in] dwSessId The ID of session.
 *
 * @return Round trip time in milliseconds.
 *
 * @see @ref MtcCall::Mtc_SessVideoRtt
 */
  public static int Mtc_SessAudioRtt(int dwSessId) {
    return MtcCallJNI.Mtc_SessAudioRtt(dwSessId);
  }

/** 
 * @brief MTC get the round trip time of video stream.
 *
 * @param [in] dwSessId The ID of session.
 *
 * @return Round trip time in milliseconds.
 *
 * @see @ref MtcCall::Mtc_SessAudioRtt
 */
  public static int Mtc_SessVideoRtt(int dwSessId) {
    return MtcCallJNI.Mtc_SessVideoRtt(dwSessId);
  }

/** 
 * @brief MTC get the jitter of audio stream.
 *
 * @param [in] dwSessId The ID of session.
 *
 * @return Jitter in milliseconds.
 *
 * @see @ref MtcCall::Mtc_SessVideoJitter
 */
  public static int Mtc_SessAudioJitter(int dwSessId) {
    return MtcCallJNI.Mtc_SessAudioJitter(dwSessId);
  }

/** 
 * @brief MTC get the jitter of video stream.
 *
 * @param [in] dwSessId The ID of session.
 *
 * @return Jitter in milliseconds.
 *
 * @see @ref MtcCall::Mtc_SessAudioJitter
 */
  public static int Mtc_SessVideoJitter(int dwSessId) {
    return MtcCallJNI.Mtc_SessVideoJitter(dwSessId);
  }

/** 
 * @brief MTC session check if peer offer a video stream.
 *
 * @param [in] dwSessId The ID of session.
 *
 * @retval true on yes.
 * @retval false on no.
 *
 * @see @ref MtcCall::Mtc_SessVideoStart, @ref MtcCall::Mtc_SessVideoStop, @ref MtcCall::Mtc_SessPeerOfferAudio
 */
  public static boolean Mtc_SessPeerOfferVideo(int dwSessId) {
    return MtcCallJNI.Mtc_SessPeerOfferVideo(dwSessId);
  }

/** 
 * @brief MTC session check if peer offer a audio stream.
 *
 * @param [in] dwSessId The ID of session.
 *
 * @retval true on yes.
 * @retval false on no.
 *
 * @see @ref MtcCall::Mtc_SessPeerOfferVideo
 */
  public static boolean Mtc_SessPeerOfferAudio(int dwSessId) {
    return MtcCallJNI.Mtc_SessPeerOfferAudio(dwSessId);
  }

/** 
 * @brief MTC session get the mute status of microphone.
 *
 * @param [in] dwSessId The ID of session which you want to get.
 *
 * @retval true on muted.
 * @retval false on not muted.
 *
 * @see @ref MtcCall::Mtc_SessSetMicMute
 */
  public static boolean Mtc_SessGetMicMute(int dwSessId) {
    return MtcCallJNI.Mtc_SessGetMicMute(dwSessId);
  }

/** 
 * @brief MTC session set the mute status of microphone.
 *
 * @param [in] dwSessId The ID of session which you want to set.
 * @param [in] bMute Indicate whether to mute the microphone.
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 *
 * @see @ref MtcCall::Mtc_SessGetMicMute
 */
  public static int Mtc_SessSetMicMute(int dwSessId, boolean bMute) {
    return MtcCallJNI.Mtc_SessSetMicMute(dwSessId, bMute);
  }

/** 
 * @brief MTC session get scale of microphone.
 *
 * @param [in] dwSessId The ID of session which you want get.
 *
 * @return Scale value, from 0.0 to 10.0, 1.0 for no scaling.
 *
 * @see @ref MtcCall::Mtc_SessSetMicScale
 */
  public static float Mtc_SessGetMicScale(int dwSessId) {
    return MtcCallJNI.Mtc_SessGetMicScale(dwSessId);
  }

/** 
 * @brief MTC session set scale of microphone.
 *
 * @param [in] dwSessId The ID of session which you want set.
 * @param [in] fScale Scale value, from 0.0 to 10.0, 1.0 for no scaling.
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 *
 * @see @ref MtcCall::Mtc_SessGetMicScale
 */
  public static int Mtc_SessSetMicScale(int dwSessId, float fScale) {
    return MtcCallJNI.Mtc_SessSetMicScale(dwSessId, fScale);
  }

/** 
 * @brief MTC session get the mute status of speaker.
 *
 * @param [in] dwSessId The ID of session which you want to get.
 *
 * @retval true on muted.
 * @retval false on not muted.
 *
 * @see @ref MtcCall::Mtc_SessSetSpkMute
 */
  public static boolean Mtc_SessGetSpkMute(int dwSessId) {
    return MtcCallJNI.Mtc_SessGetSpkMute(dwSessId);
  }

/** 
 * @brief MTC session set the mute status of speaker.
 *
 * @param [in] dwSessId The ID of session which you want to set.
 * @param [in] bMute Indicate whether to mute the speaker.
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 *
 * @see @ref MtcCall::Mtc_SessGetSpkMute
 */
  public static int Mtc_SessSetSpkMute(int dwSessId, boolean bMute) {
    return MtcCallJNI.Mtc_SessSetSpkMute(dwSessId, bMute);
  }

/** 
 * @brief MTC session get scale of speaker.
 *
 * @param [in] dwSessId The ID of session which you want get.
 *
 * @return Scale value, from 0.0 to 10.0, 1.0 for no scaling.
 *
 * @see @ref MtcCall::Mtc_SessSetSpkScale
 */
  public static float Mtc_SessGetSpkScale(int dwSessId) {
    return MtcCallJNI.Mtc_SessGetSpkScale(dwSessId);
  }

/** 
 * @brief MTC session set scale of speaker.
 *
 * @param [in] dwSessId The ID of session which you want set.
 * @param [in] fScale Scale value, from 0.0 to 10.0, 1.0 for no scaling.
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 *
 * @see @ref MtcCall::Mtc_SessGetSpkScale
 */
  public static int Mtc_SessSetSpkScale(int dwSessId, float fScale) {
    return MtcCallJNI.Mtc_SessSetSpkScale(dwSessId, fScale);
  }

/** 
 * @brief MTC session get volume of speaker.
 *
 * @param [in] dwSessId The ID of session which you want get.
 *
 * @return Volume value, from 0 to 20.
 *
 * @see @ref MtcCall::Mtc_SessSetSpkVol
 */
  public static int Mtc_SessGetSpkVol(int dwSessId) {
    return MtcCallJNI.Mtc_SessGetSpkVol(dwSessId);
  }

/** 
 * @brief MTC session set volume of speaker.
 *
 * @param [in] dwSessId The ID of session which you want set.
 * @param [in] iVol Volume value, from 0 to 20.
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 *
 * @see @ref MtcCall::Mtc_SessGetSpkVol
 */
  public static int Mtc_SessSetSpkVol(int dwSessId, int iVol) {
    return MtcCallJNI.Mtc_SessSetSpkVol(dwSessId, iVol);
  }

/** 
 * @brief MTC session get mix voice status.
 *
 * @param [in] dwSessId The ID of session which you want to set.
 *
 * @return mix voice status.
 */
  public static boolean Mtc_SessGetMixVoice(int dwSessId) {
    return MtcCallJNI.Mtc_SessGetMixVoice(dwSessId);
  }

/** 
 * @brief MTC session set mix voice status.
 *
 * @param [in] dwSessId The ID of session which you want to set.
 * @param [in] bEnable Indicate whether to mix voice. If true, it will mix
 *                     corresponding session's voice.
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 */
  public static int Mtc_SessSetMixVoice(int dwSessId, boolean bEnable) {
    return MtcCallJNI.Mtc_SessSetMixVoice(dwSessId, bEnable);
  }

/** 
 * @brief MTC session rotate image orientation from remote.
 *
 * @param [in] dwSessId The ID of session which you want to set.
 * @param [in] iOrientation Orientation of image. @ref MtcMediaConstants::EN_MTC_ORIENTATION_PORTRAIT.
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 */
  public static int Mtc_SessRotateRemote(int dwSessId, int iOrientation) {
    return MtcCallJNI.Mtc_SessRotateRemote(dwSessId, iOrientation);
  }

/** 
 * @brief MTC session rotate image orientation of local.
 *
 * @param [in] dwSessId The ID of session which you want to set.
 * @param [in] iOrientation Orientation of image. @ref MtcMediaConstants::EN_MTC_ORIENTATION_PORTRAIT.
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 */
  public static int Mtc_SessRotateLocal(int dwSessId, int iOrientation) {
    return MtcCallJNI.Mtc_SessRotateLocal(dwSessId, iOrientation);
  }

/** 
 * @brief MTC session get cookie value.
 *
 * @param [in] dwSessId The ID of session which you want to get cookie of.
 *
 * @return The cookie of session.
 *
 * The cookie value could be set by @ref MtcCall::Mtc_SessCall, @ref MtcCall::Mtc_SessAnswer or
 * @ref MtcCall::Mtc_SessSetCookie previously.
 *
 * @see @ref MtcCall::Mtc_SessCall, @ref MtcCall::Mtc_SessAnswer, @ref MtcCall::Mtc_SessSetCookie
 */
  public static Object Mtc_SessGetCookie(int dwSessId) {
    return MtcCallJNI.Mtc_SessGetCookie(dwSessId);
  }

/** 
 * @brief MTC session set cookie value.
 *
 * @param [in] dwSessId The ID of session which you want to set cookie.
 * @param [in] zCookie The cookie which you want to set.
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 *
 * @see @ref MtcCall::Mtc_SessCall, @ref MtcCall::Mtc_SessAnswer, @ref MtcCall::Mtc_SessGetCookie
 */
  public static int Mtc_SessSetCookie(int dwSessId, Object zCookie) {
    return MtcCallJNI.Mtc_SessSetCookie(dwSessId, zCookie);
  }

/** 
 * @brief MTC session get Call-ID string.
 *
 * @param [in] dwSessId The ID of session which you want to get.
 * @param [out] ppcCallId The string of Call-ID.
 *
 *   The caller must copy out parameter, then use.
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 */
  public static int Mtc_SessGetCallId(int dwSessId, MtcString ppcCallId) {
    return MtcCallJNI.Mtc_SessGetCallId(dwSessId, ppcCallId);
  }

/** 
 * @brief MTC session get peer URI and display name.
 *
 * @param [in] dwSessId The ID of session which you want to get.
 * @param [out] ppcDispName The display name of peer user.
 * @param [out] ppcUri The URI of peer user.
 *
 *   The caller must copy out parameter, then use.
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 *
 * The peer information get by this function is actually from FROM/TO header in
 * SIP message. So the true identity of peer user is not asserted by server.
 *
 * @see @ref MtcCall::Mtc_SessGetPeerId
 */
  public static int Mtc_SessGetPeerUri(int dwSessId, MtcString ppcDispName, MtcString ppcUri) {
    return MtcCallJNI.Mtc_SessGetPeerUri(dwSessId, ppcDispName, ppcUri);
  }

/** 
 * @brief MTC session get peer id, based on polices.
 *
 * @param [in] dwSessId The ID of session which you want to get.
 * @param [out] ppcDispName The display name of peer user which you have this session with.
 * @param [out] ppcUri The URI of peer user which you have this session with.
 *
 *   The caller must copy out parameter, then use.
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 *
 * Note the result of this function may be different with Mtc_SessGetPeerUri
 * because the apply of polices. For example, OIP, OIR, TIP, TIR, and privacy.
 *
 * @see @ref MtcCall::Mtc_SessGetPeerUri
 */
  public static int Mtc_SessGetPeerId(int dwSessId, MtcString ppcDispName, MtcString ppcUri) {
    return MtcCallJNI.Mtc_SessGetPeerId(dwSessId, ppcDispName, ppcUri);
  }

/** 
 * @brief MTC session check if the peer is contains isfocus parameter.
 *
 * @param [in] dwSessId The ID of session.
 *
 * @retval true on peer is focus.
 * @retval false on peer no focus.
 */
  public static boolean Mtc_SessPeerIsFocus(int dwSessId) {
    return MtcCallJNI.Mtc_SessPeerIsFocus(dwSessId);
  }

/** 
 * @brief MTC session check if the offer/answer exchange is completed.
 *
 * @param [in] dwSessId The ID of session.
 *
 * @retval true on offer has answer.
 * @retval false on offer has not answer.
 *
 * @see @ref MtcCall::Mtc_SessGetEarlyMediaStatus
 */
  public static boolean Mtc_SessHasOfferAnswer(int dwSessId) {
    return MtcCallJNI.Mtc_SessHasOfferAnswer(dwSessId);
  }

/** 
 * @brief MTC session get alert information type.
 *
 * @param [in] dwSessId The ID of session which you want to get.
 *
 * @retval @ref MtcCallConstants::EN_MTC_CALL_ALERT_INFO_NULL.
 *
 * The information get by this function is actually from Alert-Info header 
 * in SIP message.
 */
  public static int Mtc_SessGetAlertInfo(int dwSessId) {
    return MtcCallJNI.Mtc_SessGetAlertInfo(dwSessId);
  }

/** 
 * @brief MTC session get the early media status.
 *
 * @param [in] dwSessId The ID of session which you want to get its early media
 *                      status.
 * @param [in] bVideo If true, get video status, otherwise get audio status.
 *
 * @retval @ref MtcCallConstants::EN_MTC_CALL_EM_STATUS_INACTIVE.
 *
 * @see @ref MtcCall::Mtc_SessHasOfferAnswer
 */
  public static int Mtc_SessGetEarlyMediaStatus(int dwSessId, boolean bVideo) {
    return MtcCallJNI.Mtc_SessGetEarlyMediaStatus(dwSessId, bVideo);
  }

/**
 * @brief Reccord mic start.
 *
 * It will reccord from mic to file.
 *
 * @param [in] pcFileName The reccord file name.
 * @param [in] ucFileType The reccord file type, @ref MtcMediaConstants::EN_MTC_MFILE_UNKNOW
 *
 * @retval ZOK Audio Reccord  successfully.
 * @retval ZFAILED Audio Reccord failed.
 *
 * @see @ref MtcCall::Mtc_SessRecMicStop
 */
  public static int Mtc_SessRecMicStart(String pcFileName, short ucFileType) {
    return MtcCallJNI.Mtc_SessRecMicStart(pcFileName, ucFileType);
  }

/**
 * @brief Reccord Audio stop.
 *
 * @see @ref MtcCall::Mtc_SessRecMicStart
 */
  public static int Mtc_SessRecMicStop() {
    return MtcCallJNI.Mtc_SessRecMicStop();
  }

/** 
 * @brief MTC session record playout.
 *
 * @param [in] dwSessId The ID of session which you want to record, 
 *                      if dwSessId is invalid, record the mix playout.
 * @param [in] pcFileName The reccord file name.
 * @param [in] ucFileType The reccord file type, @ref MtcMediaConstants::EN_MTC_MFILE_UNKNOW
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 */
  public static int Mtc_SessRecPlayStart(int dwSessId, String pcFileName, short ucFileType) {
    return MtcCallJNI.Mtc_SessRecPlayStart(dwSessId, pcFileName, ucFileType);
  }

/** 
 * @brief MTC session stop record playout.
 *
 * @param [in] dwSessId The ID of session which you want to stop record, 
 *                      if dwSessId is invalid, stop record the mix playout.
 *
 * @retval ZOK on succeed.
 * @retval ZFAILED on failure.
 */
  public static int Mtc_SessRecPlayStop(int dwSessId) {
    return MtcCallJNI.Mtc_SessRecPlayStop(dwSessId);
  }

/**
 * @brief Reccord call start.
 *
 * It will reccord from call to file.
 *
 * @param [in] pcFileName The reccord file name.
 * @param [in] ucFileType The reccord file type, @ref MtcMediaConstants::EN_MTC_MFILE_UNKNOW
 *
 * @retval ZOK Audio Reccord  successfully.
 * @retval ZFAILED Audio Reccord failed.
 *
 * @see @ref MtcCall::Mtc_SessRecCallStop
 */
  public static int Mtc_SessRecCallStart(String pcFileName, short ucFileType) {
    return MtcCallJNI.Mtc_SessRecCallStart(pcFileName, ucFileType);
  }

/**
 * @brief Reccord Audio stop.
 *
 * @see @ref MtcCall::Mtc_SessRecCallStart
 */
  public static int Mtc_SessRecCallStop() {
    return MtcCallJNI.Mtc_SessRecCallStop();
  }

/** 
 * @brief Mtc session start recording sound.
 *
 * @param [in] dwSessId The ID of session whose sound you want to record.
 * @param [in] pcFileName The recording file name.
 * @param [in] ucFileType The recording file type, @ref MtcMediaConstants::EN_MTC_MFILE_UNKNOW.
 * @param [in] dwRecMode The recording mode. @ref MtcCallConstants::EN_MTC_CALL_REC_MODE_ALL.
 *
 * @see @ref MtcCall::Mtc_SessRecSndStop
 */
  public static int Mtc_SessRecSndStart(int dwSessId, String pcFileName, short ucFileType, int dwRecMode) {
    return MtcCallJNI.Mtc_SessRecSndStart(dwSessId, pcFileName, ucFileType, dwRecMode);
  }

/** 
 * @brief Mtc session stop recording sound.
 *
 * @param [in] dwSessId The ID of session.
 *
 * @see @ref MtcCall::Mtc_SessRecSndStart
 */
  public static int Mtc_SessRecSndStop(int dwSessId) {
    return MtcCallJNI.Mtc_SessRecSndStop(dwSessId);
  }

/** 
 * @brief Mtc session get audio statistics.
 *
 * @param [in] dwSessId The ID of session.
 *
 * @retval String of audio statistics.
 */
  public static String Mtc_SessGetAudioStat(int dwSessId) {
    return MtcCallJNI.Mtc_SessGetAudioStat(dwSessId);
  }

/** 
 * @brief Mtc session get video statistics.
 *
 * @param [in] dwSessId The ID of session.
 *
 * @retval String of video statistics.
 */
  public static String Mtc_SessGetVideoStat(int dwSessId) {
    return MtcCallJNI.Mtc_SessGetVideoStat(dwSessId);
  }

/**
 * @brief MTC session set state of receiving-side AGC.
 *
 * @param [in] dwSessId The ID of session.
 * @param [in] bEnable true to enable Rx-AGC, false to disable Rx-AGC.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 *
 * @see @ref MtcCall::Mtc_SessGetRxAgcEnable
 */
  public static int Mtc_SessSetRxAgcEnable(int dwSessId, boolean bEnable) {
    return MtcCallJNI.Mtc_SessSetRxAgcEnable(dwSessId, bEnable);
  }

/**
 * @brief MTC session get state of receiving-side AGC.
 *
 * @param [in] dwSessId The ID of session.
 * @param [out] *pbEnable Current state of Rx-AGC.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 *
 * @see @ref MtcCall::Mtc_SessSetRxAgcEnable
 */
  public static int Mtc_SessGetRxAgcEnable(int dwSessId, MtcNumber pbEnable) {
    return MtcCallJNI.Mtc_SessGetRxAgcEnable(dwSessId, pbEnable);
  }

/**
 * @brief MTC session set mode of receiving-side AGC.
 *
 * @param [in] dwSessId The ID of session.
 * @param [in] ucMode Mode of Rx-AGC, @ref MtcMediaConstants::EN_MTC_RX_GC_FIXED.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 *
 * @see @ref MtcCall::Mtc_SessGetRxAgcMode
 */
  public static int Mtc_SessSetRxAgcMode(int dwSessId, short ucMode) {
    return MtcCallJNI.Mtc_SessSetRxAgcMode(dwSessId, ucMode);
  }

/**
 * @brief MTC session get mode of receiving-side AGC.
 *
 * @param [in] dwSessId The ID of session.
 * @param [out] *pucMode Mode of Rx-AGC, @ref MtcMediaConstants::EN_MTC_RX_GC_FIXED.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 *
 * @see @ref MtcCall::Mtc_SessSetRxAgcMode
 */
  public static int Mtc_SessGetRxAgcMode(int dwSessId, MtcNumber pucMode) {
    return MtcCallJNI.Mtc_SessGetRxAgcMode(dwSessId, pucMode);
  }

/**
 * @brief MTC session set traget dBOV of receiving-side AGC.
 *
 * @param [in] dwSessId The ID of session.
 * @param [in] wTargetDb Traget dBOV of Rx-AGC.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 *
 * @see @ref MtcCall::Mtc_SessGetRxAgcTarget
 */
  public static int Mtc_SessSetRxAgcTarget(int dwSessId, int wTargetDb) {
    return MtcCallJNI.Mtc_SessSetRxAgcTarget(dwSessId, wTargetDb);
  }

/**
 * @brief MTC session get traget dBOV of receiving-side AGC.
 *
 * @param [in] dwSessId The ID of session.
 * @param [out] *pwTargetDb Traget dBOV of Rx-AGC.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 *
 * @see @ref MtcCall::Mtc_SessSetRxAgcTarget
 */
  public static int Mtc_SessGetRxAgcTarget(int dwSessId, MtcNumber pwTargetDb) {
    return MtcCallJNI.Mtc_SessGetRxAgcTarget(dwSessId, pwTargetDb);
  }

/**
 * @brief MTC session set state of receiving-side ANR.
 *
 * @param [in] dwSessId The ID of session.
 * @param [in] bEnable true to enable Rx-ANR, false to disable Rx-ANR.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 *
 * @see @ref MtcCall::Mtc_SessGetRxAnrEnable
 */
  public static int Mtc_SessSetRxAnrEnable(int dwSessId, boolean bEnable) {
    return MtcCallJNI.Mtc_SessSetRxAnrEnable(dwSessId, bEnable);
  }

/**
 * @brief MTC session get state of receiving-side ANR.
 *
 * @param [in] dwSessId The ID of session.
 * @param [out] *pbEnable Current state of Rx-ANR.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 *
 * @see @ref MtcCall::Mtc_SessSetRxAnrEnable
 */
  public static int Mtc_SessGetRxAnrEnable(int dwSessId, MtcNumber pbEnable) {
    return MtcCallJNI.Mtc_SessGetRxAnrEnable(dwSessId, pbEnable);
  }

/**
 * @brief MTC session set mode of receiving-side ANR.
 *
 * @param [in] dwSessId The ID of session.
 * @param [in] ucMode Mode of Rx-ANR, @ref MtcMediaConstants::EN_MTC_NS_LOW.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 *
 * @see @ref MtcCall::Mtc_SessGetRxAnrMode
 */
  public static int Mtc_SessSetRxAnrMode(int dwSessId, short ucMode) {
    return MtcCallJNI.Mtc_SessSetRxAnrMode(dwSessId, ucMode);
  }

/**
 * @brief MTC session get mode of receiving-side ANR.
 *
 * @param [in] dwSessId The ID of session.
 * @param [out] *pucMode Mode of Rx-ANR, @ref MtcMediaConstants::EN_MTC_NS_LOW.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 *
 * @see @ref MtcCall::Mtc_SessSetRxAnrMode
 */
  public static int Mtc_SessGetRxAnrMode(int dwSessId, MtcNumber pucMode) {
    return MtcCallJNI.Mtc_SessGetRxAnrMode(dwSessId, pucMode);
  }

/**
 * @brief MTC session set state of VAD.
 *
 * @param [in] dwSessId The ID of session.
 * @param [in] bEnable true to enable VAD, false to disable VAD.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 *
 * @see @ref MtcCall::Mtc_SessGetVadEnable
 */
  public static int Mtc_SessSetVadEnable(int dwSessId, boolean bEnable) {
    return MtcCallJNI.Mtc_SessSetVadEnable(dwSessId, bEnable);
  }

/**
 * @brief MTC session get state of VAD.
 *
 * @param [in] dwSessId The ID of session.
 * @param [out] *pbEnable Current state of VAD.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 *
 * @see @ref MtcCall::Mtc_SessSetVadEnable
 */
  public static int Mtc_SessGetVadEnable(int dwSessId, MtcNumber pbEnable) {
    return MtcCallJNI.Mtc_SessGetVadEnable(dwSessId, pbEnable);
  }

/**
 * @brief MTC session set mode of VAD.
 *
 * @param [in] dwSessId The ID of session.
 * @param [in] ucMode Mode of VAD, @ref MtcMediaConstants::EN_MTC_VAD_NORMAL.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 *
 * @see @ref MtcCall::Mtc_SessGetVadMode
 */
  public static int Mtc_SessSetVadMode(int dwSessId, short ucMode) {
    return MtcCallJNI.Mtc_SessSetVadMode(dwSessId, ucMode);
  }

/**
 * @brief MTC session get mode of VAD.
 *
 * @param [in] dwSessId The ID of session.
 * @param [out] *pucMode Mode of VAD, @ref MtcMediaConstants::EN_MTC_VAD_NORMAL.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 *
 * @see @ref MtcCall::Mtc_SessSetVadMode
 */
  public static int Mtc_SessGetVadMode(int dwSessId, MtcNumber pucMode) {
    return MtcCallJNI.Mtc_SessGetVadMode(dwSessId, pucMode);
  }

/**
 * @brief MTC session enable/disable color enhancement.
 *
 * @param [in] dwSessId The ID of session.
 * @param [in] bEnable true to enable color enhancement, 
 *                     false to disable color enhancement.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 */
  public static int Mtc_SessEnhanceColor(int dwSessId, boolean bEnable) {
    return MtcCallJNI.Mtc_SessEnhanceColor(dwSessId, bEnable);
  }

/**
 * @brief MTC session enable/disable CPU load control.
 *
 * @param [in] dwSessId The ID of session.
 * @param [in] bEnable true to enable CPU load control, 
 *                     false to disable CPU load control.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 */
  public static int Mtc_SessArsEnableCpuCtrl(int dwSessId, boolean bEnable) {
    return MtcCallJNI.Mtc_SessArsEnableCpuCtrl(dwSessId, bEnable);
  }

/**
 * @brief MTC session set target usage percent of CPU load control.
 *
 * @param [in] dwSessId The ID of session.
 * @param [in] iLoad Target usage percent of CPU load control, should be 0-100.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 */
  public static int Mtc_SessArsSetCupCtrlTgt(int dwSessId, int iLoad) {
    return MtcCallJNI.Mtc_SessArsSetCupCtrlTgt(dwSessId, iLoad);
  }

/**
 * @brief MTC session enable/disable bandwidth efficient mode.
 *
 * @param [in] dwSessId The ID of session.
 * @param [in] bEnable true to enable bandwidth efficient mode, 
 *                     false to disable bandwidth efficient mode.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 */
  public static int Mtc_SessArsEnableBem(int dwSessId, boolean bEnable) {
    return MtcCallJNI.Mtc_SessArsEnableBem(dwSessId, bEnable);
  }

/**
 * @brief MTC session ARS get video bitrate in bps.
 * @param  [in] dwSessId  The ID of session.
 * @param  [out] piBitrate Current max bitrate of ARS in bps.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 */
  public static int Mtc_SessArsGetVideoBitrate(int dwSessId, MtcNumber piBitrate) {
    return MtcCallJNI.Mtc_SessArsGetVideoBitrate(dwSessId, piBitrate);
  }

/**
 * @brief MTC session ARS set video bitrate in bps.
 * @param  [in] dwSessId  The ID of session.
 * @param  [in] iBitrate Max bitrate of ARS in bps.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 */
  public static int Mtc_SessArsSetVideoBitrate(int dwSessId, int iBitrate) {
    return MtcCallJNI.Mtc_SessArsSetVideoBitrate(dwSessId, iBitrate);
  }

/**
 * @brief MTC session start recoding incoming video.
 *
 * @param [in] dwSessId The ID of session.
 * @param [in] pcFileName Name of the file which to store the recording data.
 * @param [in] ucFileType File type, @ref MtcMediaConstants::EN_MTC_MFILE_UNKNOW.
 * @param [in] iWidth Video width in pixel of recoding data.
 * @param [in] iHeight Video height in pixel of recoding data.
 * @param [in] bWithAudio true to recording audio data.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 *
 * @see @ref MtcCall::Mtc_SessRecRecvVideoStop
 */
  public static int Mtc_SessRecRecvVideoStart(int dwSessId, String pcFileName, short ucFileType, int iWidth, int iHeight, boolean bWithAudio) {
    return MtcCallJNI.Mtc_SessRecRecvVideoStart(dwSessId, pcFileName, ucFileType, iWidth, iHeight, bWithAudio);
  }

/**
 * @brief MTC session stop recoding incoming video.
 *
 * @param [in] dwSessId The ID of session.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 *
 * @see @ref MtcCall::Mtc_SessRecRecvVideoStart
 */
  public static int Mtc_SessRecRecvVideoStop(int dwSessId) {
    return MtcCallJNI.Mtc_SessRecRecvVideoStop(dwSessId);
  }

/**
 * @brief MTC session start recoding sending video.
 *
 * @param [in] dwSessId The ID of session.
 * @param [in] pcFileName Name of the file which to store the recording data.
 * @param [in] ucFileType File type, @ref MtcMediaConstants::EN_MTC_MFILE_UNKNOW.
 * @param [in] iWidth Video width in pixel of recoding data.
 * @param [in] iHeight Video height in pixel of recoding data.
 * @param [in] bWithAudio true to recording audio data.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 *
 * @see @ref MtcCall::Mtc_SessRecSendVideoStop
 */
  public static int Mtc_SessRecSendVideoStart(int dwSessId, String pcFileName, short ucFileType, int iWidth, int iHeight, boolean bWithAudio) {
    return MtcCallJNI.Mtc_SessRecSendVideoStart(dwSessId, pcFileName, ucFileType, iWidth, iHeight, bWithAudio);
  }

/**
 * @brief MTC session stop recoding sending video.
 *
 * @param [in] dwSessId The ID of session.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 *
 * @see @ref MtcCall::Mtc_SessRecSendVideoStart
 */
  public static int Mtc_SessRecSendVideoStop(int dwSessId) {
    return MtcCallJNI.Mtc_SessRecSendVideoStop(dwSessId);
  }

/**
 * @brief Take a snapshot of display render.
 *
 * @param [in] dwSessId The ID of session.
 * @param [in] pcFileName Name of the file which to store the picture.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 *
 * @see @ref MtcCall::Mtc_SessCaptureSnapshot
 */
  public static int Mtc_SessRenderSnapshot(int dwSessId, String pcFileName) {
    return MtcCallJNI.Mtc_SessRenderSnapshot(dwSessId, pcFileName);
  }

/**
 * @brief Take a snapshot of capture.
 *
 * @param [in] dwSessId The ID of session.
 * @param [in] pcFileName Name of the file which to store the picture.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 *
 * @see @ref MtcCall::Mtc_SessRenderSnapshot
 */
  public static int Mtc_SessCaptureSnapshot(int dwSessId, String pcFileName) {
    return MtcCallJNI.Mtc_SessCaptureSnapshot(dwSessId, pcFileName);
  }

/**
 * @brief MTC session get terminate reason description.
 *
 * @param [in] dwStatCode The status code.
 *
 * @return The status code description successfully, otherwise return "UNKNOWN".
 */
  public static String Mtc_SessGetStatDesc(int dwStatCode) {
    return MtcCallJNI.Mtc_SessGetStatDesc(dwStatCode);
  }

}
