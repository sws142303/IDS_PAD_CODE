/**
 * @file MtcCallDb.java
 * @brief MtcCallDb interface
 */
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.juphoon.lemon;

/**
 * @brief MtcCallDb interface
 */
public class MtcCallDb implements MtcCallDbConstants {
/**
 * @brief Get the DTMF message type.
 *
 * @return The DTMF message type.
 *         DTMF type MTC MtcCallDbConstants::EN_MTC_DB_DTMF_AUTO, include 
 *         EN_MTC_DB_DTMF_INBAND, EN_MTC_DB_DTMF_OUTBAND, 
 *         EN_MTC_DB_DTMF_INFO, EN_MTC_DB_DTMF_INFO_HW, 
 *         EN_MTC_DB_DTMF_AUTO.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetDtmfType
 */
  public static int Mtc_CallDbGetDtmfType() {
    return MtcCallDbJNI.Mtc_CallDbGetDtmfType();
  }

/**
 * @brief Set the DTMF message type.
 *
 * @param [in] dwType The DTMF message type.
 *         DTMF type MtcCallDbConstants::EN_MTC_DB_DTMF_AUTO, include 
 *         EN_MTC_DB_DTMF_INBAND, EN_MTC_DB_DTMF_OUTBAND, 
 *         EN_MTC_DB_DTMF_INFO, EN_MTC_DB_DTMF_INFO_HW, 
 *         EN_MTC_DB_DTMF_AUTO.
 *
 * @retval ZOK Set the DTMF message type successfully.
 * @retval ZFAILED Set the DTMF message type failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetDtmfType
 */
  public static int Mtc_CallDbSetDtmfType(int dwType) {
    return MtcCallDbJNI.Mtc_CallDbSetDtmfType(dwType);
  }

/**
 * @brief Get the DTMF message payload.
 *
 * @return The DTMF message payload.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetDtmfPayload
 */
  public static int Mtc_CallDbGetDtmfPayload() {
    return MtcCallDbJNI.Mtc_CallDbGetDtmfPayload();
  }

/**
 * @brief Set the DTMF message payload.
 *
 * @param [in] dwPayload The DTMF message payload.
 *
 * @retval ZOK Set the DTMF message payload successfully.
 * @retval ZFAILED Set the DTMF message payload failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetDtmfPayload
 */
  public static int Mtc_CallDbSetDtmfPayload(int dwPayload) {
    return MtcCallDbJNI.Mtc_CallDbSetDtmfPayload(dwPayload);
  }

/**
 * @brief Get the watch DTMF flag.
 *
 * @retval true It will notify watcher when receive DTMF.
 * @retval false Don't notify.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetDtmfWatch
 */
  public static boolean Mtc_CallDbGetDtmfWatch() {
    return MtcCallDbJNI.Mtc_CallDbGetDtmfWatch();
  }

/**
 * @brief Set the watch DTMF flag.
 *
 * @param [in] bWatch If true, it will notify watcher when receive DTMF.
 *                    false, Don't notify.
 *
 * @retval ZOK Set watch DTMF flag successfully.
 * @retval ZFAILED Set watch DTMF flag failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetDtmfWatch
 */
  public static int Mtc_CallDbSetDtmfWatch(boolean bWatch) {
    return MtcCallDbJNI.Mtc_CallDbSetDtmfWatch(bWatch);
  }

/**
 * @brief Get audio QOS.
 *
 * @param [out] pbAec Audio echo cancel option.
 * @param [out] pbAnr Audio noise reduction.
 * @param [out] pbAgc Audio gain control option.
 * @param [out] pbVad Audio silence detection.
 *
 * @retval ZOK Get audio QOS successfully.
 * @retval ZFAILED Get audio QOS failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetAudioQos
 */
  public static int Mtc_CallDbGetAudioQos(MtcNumber pbAec, MtcNumber pbAnr, MtcNumber pbAgc, MtcNumber pbVad) {
    return MtcCallDbJNI.Mtc_CallDbGetAudioQos(pbAec, pbAnr, pbAgc, pbVad);
  }

/**
 * @brief Set audio QOS.
 *
 * @param [in] bAec Audio echo cancel option.
 * @param [in] bAnr Audio noise reduction.
 * @param [in] bAgc Audio gain control option.
 * @param [in] bVad Audio silence detection.
 *
 * @retval ZOK Set audio QOS successfully.
 * @retval ZFAILED Set audio QOS failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetAudioQos
 */
  public static int Mtc_CallDbSetAudioQos(boolean bAec, boolean bAnr, boolean bAgc, boolean bVad) {
    return MtcCallDbJNI.Mtc_CallDbSetAudioQos(bAec, bAnr, bAgc, bVad);
  }

/**
 * @brief Set state of AEC.
 *
 * @param [in] bEnable true to enable AEC, false to disable AEC.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 *
 * @see MtcCallDb::Mtc_CallDbGetAecEnable
 */
  public static int Mtc_CallDbSetAecEnable(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetAecEnable(bEnable);
  }

/**
 * @brief Get state of AEC.
 *
 * @retval true indicate AEC is enabled.
 * @retval false indicate AEC is disabled.
 *
 * @see MtcCallDb::Mtc_CallDbSetAecEnable
 */
  public static boolean Mtc_CallDbGetAecEnable() {
    return MtcCallDbJNI.Mtc_CallDbGetAecEnable();
  }

/**
 * @brief Set mode of AEC.
 *
 * @param [in] ucMode Mode of AEC, @ref MtcMediaConstants::EN_MTC_EC_AEC.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 *
 * @see MtcCallDb::Mtc_CallDbGetAecMode
 */
  public static int Mtc_CallDbSetAecMode(short ucMode) {
    return MtcCallDbJNI.Mtc_CallDbSetAecMode(ucMode);
  }

/**
 * @brief Get mode of AEC.
 *
 * @return Current AEC mode, @ref MtcMediaConstants::EN_MTC_EC_AEC.
 *
 * @see MtcCallDb::Mtc_CallDbSetAecMode
 */
  public static short Mtc_CallDbGetAecMode() {
    return MtcCallDbJNI.Mtc_CallDbGetAecMode();
  }

/**
 * @brief Set state of VAD.
 *
 * @param [in] bEnable true to enable VAD, false to disable VAD.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 *
 * @see MtcCallDb::Mtc_CallDbGetVadEnable
 */
  public static int Mtc_CallDbSetVadEnable(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetVadEnable(bEnable);
  }

/**
 * @brief Get state of VAD.
 *
 * @retval true indicate VAD is enabled.
 * @retval false indicate VAD is disabled.
 *
 * @see MtcCallDb::Mtc_CallDbSetVadEnable
 */
  public static boolean Mtc_CallDbGetVadEnable() {
    return MtcCallDbJNI.Mtc_CallDbGetVadEnable();
  }

/**
 * @brief Set mode of VAD.
 *
 * @param [in] ucMode Mode of VAD, @ref MtcMediaConstants::EN_MTC_VAD_NORMAL.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 *
 * @see MtcCallDb::Mtc_CallDbGetVadMode
 */
  public static int Mtc_CallDbSetVadMode(short ucMode) {
    return MtcCallDbJNI.Mtc_CallDbSetVadMode(ucMode);
  }

/**
 * @brief Get mode of VAD.
 *
 * @return Current VAD mode, @ref MtcMediaConstants::EN_MTC_VAD_NORMAL.
 *
 * @see MtcCallDb::Mtc_CallDbSetVadMode
 */
  public static short Mtc_CallDbGetVadMode() {
    return MtcCallDbJNI.Mtc_CallDbGetVadMode();
  }

/**
 * @brief Set state of AGC.
 *
 * @param [in] bEnable true to enable AGC, false to disable AGC.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 *
 * @see MtcCallDb::Mtc_CallDbGetAgcEnable
 */
  public static int Mtc_CallDbSetAgcEnable(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetAgcEnable(bEnable);
  }

/**
 * @brief Get state of AGC.
 *
 * @retval true indicate AGC is enabled.
 * @retval false indicate AGC is disabled.
 *
 * @see MtcCallDb::Mtc_CallDbSetAgcEnable
 */
  public static boolean Mtc_CallDbGetAgcEnable() {
    return MtcCallDbJNI.Mtc_CallDbGetAgcEnable();
  }

/**
 * @brief Set mode of AGC.
 *
 * @param [in] ucMode Mode of AGC, @ref MtcMediaConstants::EN_MTC_GC_ANALOG.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 *
 * @see MtcCallDb::Mtc_CallDbGetAgcMode
 */
  public static int Mtc_CallDbSetAgcMode(short ucMode) {
    return MtcCallDbJNI.Mtc_CallDbSetAgcMode(ucMode);
  }

/**
 * @brief Get mode of AGC.
 *
 * @return Current AGC mode, @ref MtcMediaConstants::EN_MTC_GC_ANALOG.
 *
 * @see MtcCallDb::Mtc_CallDbSetAgcMode
 */
  public static short Mtc_CallDbGetAgcMode() {
    return MtcCallDbJNI.Mtc_CallDbGetAgcMode();
  }

/**
 * @brief Set target dBOV of AGC.
 *
 * @param [in] ucTargetDb Target dBOV of AGC, should be 0 - 30.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 *
 * @see MtcCallDb::Mtc_CallDbGetAgcTarget
 */
  public static int Mtc_CallDbSetAgcTarget(short ucTargetDb) {
    return MtcCallDbJNI.Mtc_CallDbSetAgcTarget(ucTargetDb);
  }

/**
 * @brief Get target dBOV of AGC.
 *
 * @return Current target dBOV of AGC.
 *
 * @see MtcCallDb::Mtc_CallDbSetAgcTarget
 */
  public static short Mtc_CallDbGetAgcTarget() {
    return MtcCallDbJNI.Mtc_CallDbGetAgcTarget();
  }

/**
 * @brief Set state of RxAGC.
 *
 * @param [in] bEnable true to enable RxAGC, false to disable RxAGC.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 *
 * @see MtcCallDb::Mtc_CallDbGetRxAgcEnable
 */
  public static int Mtc_CallDbSetRxAgcEnable(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetRxAgcEnable(bEnable);
  }

/**
 * @brief Get state of RxAGC.
 *
 * @retval true indicate RxAGC is enabled.
 * @retval false indicate RxAGC is disabled.
 *
 * @see MtcCallDb::Mtc_CallDbSetRxAgcEnable
 */
  public static boolean Mtc_CallDbGetRxAgcEnable() {
    return MtcCallDbJNI.Mtc_CallDbGetRxAgcEnable();
  }

/**
 * @brief Set mode of RxAGC.
 *
 * @param [in] ucMode Mode of RxAGC, @ref MtcMediaConstants::EN_MTC_RX_GC_FIXED.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 *
 * @see MtcCallDb::Mtc_CallDbGetRxAgcMode
 */
  public static int Mtc_CallDbSetRxAgcMode(short ucMode) {
    return MtcCallDbJNI.Mtc_CallDbSetRxAgcMode(ucMode);
  }

/**
 * @brief Get mode of RxAGC.
 *
 * @return Current RxAGC mode, @ref MtcMediaConstants::EN_MTC_RX_GC_FIXED.
 *
 * @see MtcCallDb::Mtc_CallDbSetRxAgcMode
 */
  public static short Mtc_CallDbGetRxAgcMode() {
    return MtcCallDbJNI.Mtc_CallDbGetRxAgcMode();
  }

/**
 * @brief Set target dBOV of RxAGC.
 *
 * @param [in] ucTargetDb Target dBOV of RxAGC, should be 0 - 30.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 *
 * @see MtcCallDb::Mtc_CallDbGetRxAgcTarget
 */
  public static int Mtc_CallDbSetRxAgcTarget(short ucTargetDb) {
    return MtcCallDbJNI.Mtc_CallDbSetRxAgcTarget(ucTargetDb);
  }

/**
 * @brief Get target dBOV of RxAGC.
 *
 * @return Current target dBOV of RxAGC.
 *
 * @see MtcCallDb::Mtc_CallDbSetRxAgcTarget
 */
  public static short Mtc_CallDbGetRxAgcTarget() {
    return MtcCallDbJNI.Mtc_CallDbGetRxAgcTarget();
  }

/**
 * @brief Set state of ANR.
 *
 * @param [in] bEnable true to enable ANR, false to disable ANR.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 *
 * @see MtcCallDb::Mtc_CallDbGetAnrEnable
 */
  public static int Mtc_CallDbSetAnrEnable(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetAnrEnable(bEnable);
  }

/**
 * @brief Get state of ANR.
 *
 * @retval true indicate ANR is enabled.
 * @retval false indicate ANR is disabled.
 *
 * @see MtcCallDb::Mtc_CallDbSetAnrEnable
 */
  public static boolean Mtc_CallDbGetAnrEnable() {
    return MtcCallDbJNI.Mtc_CallDbGetAnrEnable();
  }

/**
 * @brief Set mode of ANR.
 *
 * @param [in] ucMode Mode of ANR, @ref MtcMediaConstants::EN_MTC_NS_LOW.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 *
 * @see MtcCallDb::Mtc_CallDbGetAnrMode
 */
  public static int Mtc_CallDbSetAnrMode(short ucMode) {
    return MtcCallDbJNI.Mtc_CallDbSetAnrMode(ucMode);
  }

/**
 * @brief Get mode of ANR.
 *
 * @return Current mode of ANR, @ref MtcMediaConstants::EN_MTC_NS_LOW.
 *
 * @see MtcCallDb::Mtc_CallDbSetAnrMode
 */
  public static short Mtc_CallDbGetAnrMode() {
    return MtcCallDbJNI.Mtc_CallDbGetAnrMode();
  }

/**
 * @brief Set state of RxANR.
 *
 * @param [in] bEnable true to enable RxANR, false to disable RxANR.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 *
 * @see MtcCallDb::Mtc_CallDbGetRxAnrEnable
 */
  public static int Mtc_CallDbSetRxAnrEnable(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetRxAnrEnable(bEnable);
  }

/**
 * @brief Get state of RxANR.
 *
 * @retval true indicate RxANR is enabled.
 * @retval false indicate RxANR is disabled.
 *
 * @see MtcCallDb::Mtc_CallDbSetRxAnrEnable
 */
  public static boolean Mtc_CallDbGetRxAnrEnable() {
    return MtcCallDbJNI.Mtc_CallDbGetRxAnrEnable();
  }

/**
 * @brief Set mode of RxANR.
 *
 * @param [in] ucMode Mode of RxANR, @ref MtcMediaConstants::EN_MTC_NS_LOW.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 *
 * @see MtcCallDb::Mtc_CallDbGetRxAnrMode
 */
  public static int Mtc_CallDbSetRxAnrMode(short ucMode) {
    return MtcCallDbJNI.Mtc_CallDbSetRxAnrMode(ucMode);
  }

/**
 * @brief Get mode of RxANR.
 *
 * @return Current mode of RxANR, @ref MtcMediaConstants::EN_MTC_NS_LOW.
 *
 * @see MtcCallDb::Mtc_CallDbSetRxAnrMode
 */
  public static short Mtc_CallDbGetRxAnrMode() {
    return MtcCallDbJNI.Mtc_CallDbGetRxAnrMode();
  }

/**
 * @brief Set state of audio redundant.
 *
 * @param [in] bEnable true to enable audio redundant, false to disable audio redundant.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 *
 * @see MtcCallDb::Mtc_CallDbGetAudioRed
 */
  public static int Mtc_CallDbSetAudioRed(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetAudioRed(bEnable);
  }

/**
 * @brief Get state of audio redundant.
 *
 * @retval true indicate audio redundant is enabled.
 * @retval false indicate audio redundant is disabled.
 *
 * @see MtcCallDb::Mtc_CallDbSetAudioRed
 */
  public static boolean Mtc_CallDbGetAudioRed() {
    return MtcCallDbJNI.Mtc_CallDbGetAudioRed();
  }

/**
 * @brief Get supporting audio codec count
 *
 * @return The count of audio codec supported.
 */
  public static int Mtc_CallDbGetSuptAudioCodecCount() {
    return MtcCallDbJNI.Mtc_CallDbGetSuptAudioCodecCount();
  }

/**
 * @brief Get supporting audio codec from database.
 *
 * @param [in] dwIndex Codec index from 0 to (count - 1). Count get by
                       @ref MtcCallDb::Mtc_CallDbGetSuptAudioCodecCount.
 *
 * @return The string of Codec name successfully or empty string failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetSuptAudioCodecCount
 */
  public static String Mtc_CallDbGetSuptAudioCodec(int dwIndex) {
    return MtcCallDbJNI.Mtc_CallDbGetSuptAudioCodec(dwIndex);
  }

/**
 * @brief Get used audio codec count
 *
 * @return The count of audio codec supported.
 */
  public static int Mtc_CallDbGetAudioCodecCount() {
    return MtcCallDbJNI.Mtc_CallDbGetAudioCodecCount();
  }

/**
 * @brief Get audio codec from database.
 *
 * @param [in] ucPriority Codec priority.
 *
 * @return The string of Codec name successfully or empty string failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetAudioCodecByPriority
 */
  public static String Mtc_CallDbGetAudioCodecByPriority(short ucPriority) {
    return MtcCallDbJNI.Mtc_CallDbGetAudioCodecByPriority(ucPriority);
  }

/**
 * @brief Set the audio codec enable or disable.
 *
 * @param [in] pcCodec Codec name.
 * @param [in] bEnable true for enable, other for disable.
 *
 * @retval ZOK Set the audio codec enable or disable successfully.
 * @retval ZFAILED Set the audio codec enable or disable failed.
 */
  public static int Mtc_CallDbSetAudioCodecEnable(String pcCodec, boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetAudioCodecEnable(pcCodec, bEnable);
  }

/**
 * @brief Set the audio codec priority.
 *
 * @param [in] pcName Codec name.
 * @param [in] ucPriority Codec priority.
 *
 * @retval ZOK Set the audio codec priority successfully.
 * @retval ZFAILED Set the audio codec priority failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetAudioCodecByPriority
 */
  public static int Mtc_CallDbSetAudioCodecByPriority(String pcName, short ucPriority) {
    return MtcCallDbJNI.Mtc_CallDbSetAudioCodecByPriority(pcName, ucPriority);
  }

/**
 * @brief Get audio device.
 *
 * @param [out] ppcInput Audio input device name.
 * @param [out] ppcOutput Audio output device name.
 *
 * @retval ZOK get the audio device successfully.
 * @retval ZFAILED get the audio device failed.
 */
  public static int Mtc_CallDbGetAudioDevice(MtcString ppcInput, MtcString ppcOutput) {
    return MtcCallDbJNI.Mtc_CallDbGetAudioDevice(ppcInput, ppcOutput);
  }

/**
 * @brief Set audio device.
 *
 * @param [in] pcInput Audio input device name.
 * @param [in] pcOutput Audio output device name.
 *
 * @retval ZOK Set the audio device successfully.
 * @retval ZFAILED Set the audio device failed.
 */
  public static int Mtc_CallDbSetAudioDevice(String pcInput, String pcOutput) {
    return MtcCallDbJNI.Mtc_CallDbSetAudioDevice(pcInput, pcOutput);
  }

/**
 * @brief Get default volume value for speaker.
 *
 * @return Default volume value for speaker, from 0-20.
 */
  public static int Mtc_CallDbGetSpkDftVol() {
    return MtcCallDbJNI.Mtc_CallDbGetSpkDftVol();
  }

/**
 * @brief Set default volume value for speaker.
 *
 * @param [in] iVol Default volume value for speaker, from 0-20.
 *
 * @retval ZOK Set successfully.
 * @retval ZFAILED Set failed.
 */
  public static int Mtc_CallDbSetSpkDftVol(int iVol) {
    return MtcCallDbJNI.Mtc_CallDbSetSpkDftVol(iVol);
  }

/**
 * @brief Get supporting video codec count
 *
 * @return The count of video codec supported.
 */
  public static int Mtc_CallDbGetSuptVideoCodecCount() {
    return MtcCallDbJNI.Mtc_CallDbGetSuptVideoCodecCount();
  }

/**
 * @brief Get supporting video codec from database.
 *
 * @param [in] dwIndex Codec index from 0 to (count - 1). Count get by
                       @ref MtcCallDb::Mtc_CallDbGetSuptVideoCodecCount.
 *
 * @return The string of Codec name successfully or empty string failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetSuptVideoCodecCount
 */
  public static String Mtc_CallDbGetSuptVideoCodec(int dwIndex) {
    return MtcCallDbJNI.Mtc_CallDbGetSuptVideoCodec(dwIndex);
  }

/**
 * @brief Get video codec count.
 *
 * @return Video used codec count.
 */
  public static int Mtc_CallDbGetVideoCodecCount() {
    return MtcCallDbJNI.Mtc_CallDbGetVideoCodecCount();
  }

/**
 * @brief Get video codec from database.
 *
 * @param [in] ucPriority Codec priority.
 *
 * @return The string of Codec name successfully or empty string failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetVideoCodecByPriority
 */
  public static String Mtc_CallDbGetVideoCodecByPriority(short ucPriority) {
    return MtcCallDbJNI.Mtc_CallDbGetVideoCodecByPriority(ucPriority);
  }

/**
 * @brief Set the video codec enable or disable.
 *
 * @param [in] pcCodec Codec name.
 * @param [in] bEnable true for enable, other for disable.
 *
 * @retval ZOK Set the video codec enable or disable successfully.
 * @retval ZFAILED Set the video codec enable or disable failed.
 */
  public static int Mtc_CallDbSetVideoCodecEnable(String pcCodec, boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoCodecEnable(pcCodec, bEnable);
  }

/**
 * @brief Set the video codec priority.
 *
 * @param [in] pcCodec Codec name.
 * @param [in] ucPriority Codec priority.
 *
 * @retval ZOK Set the video codec priority successfully.
 * @retval ZFAILED Set the video codec priority failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVideoCodecByPriority
 */
  public static int Mtc_CallDbSetVideoCodecByPriority(String pcCodec, short ucPriority) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoCodecByPriority(pcCodec, ucPriority);
  }

/**
 * @brief Get video device.
 *
 * @return The string of video capture device name or empty string failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVideoCodecByPriority
 */
  public static String Mtc_CallDbGetVideoDevice() {
    return MtcCallDbJNI.Mtc_CallDbGetVideoDevice();
  }

/**
 * @brief Set video device.
 *
 * @param [in] pcCapture Video capture device name.
 *
 * @retval ZOK Set the video device successfully.
 * @retval ZFAILED Set the video device failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVideoCodecByPriority
 */
  public static int Mtc_CallDbSetVideoDevice(String pcCapture) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoDevice(pcCapture);
  }

/**
 * @brief Get video bitrate.
 *
 * @retval Video bitrate parameter in bps.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetVideoBitrate
 */
  public static int Mtc_CallDbGetVideoBitrate() {
    return MtcCallDbJNI.Mtc_CallDbGetVideoBitrate();
  }

/**
 * @brief Set video bitrate.
 *
 * @param [in] dwBitRate Video bitrate parameter in bps.
 *
 * @retval ZOK Set the video bitrate successfully.
 * @retval ZFAILED Set the video bitrate failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVideoBitrate
 */
  public static int Mtc_CallDbSetVideoBitrate(int dwBitRate) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoBitrate(dwBitRate);
  }

/**
 * @brief Get video frame rate.
 *
 * @retval Video frame rate parameter in fps.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetVideoFramerate
 */
  public static int Mtc_CallDbGetVideoFramerate() {
    return MtcCallDbJNI.Mtc_CallDbGetVideoFramerate();
  }

/**
 * @brief Set video frame rate.
 *
 * @param [in] dwFrameRate Video frame rate parameter in fps.
 *
 * @retval ZOK Set the video frame rate successfully.
 * @retval ZFAILED Set the video frame rate failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVideoFramerate
 */
  public static int Mtc_CallDbSetVideoFramerate(int dwFrameRate) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoFramerate(dwFrameRate);
  }

/**
 * @brief Set video h264 profile.
 *
 * @param [in] ucProfile Video h264 profile parameter.
 *
 * @retval ZOK Set the video h264 profile successfully.
 * @retval ZFAILED Set the video h264 profile  failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVideoH264Profile
 */
  public static int Mtc_CallDbSetVideoH264Profile(short ucProfile) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoH264Profile(ucProfile);
  }

/**
 * @brief Get video h264 profile.
 *
 * @return Video h264 profile, @ref  MtcCallDbConstants::EN_MTC_DB_H264_PROFILE_BASELINE.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetVideoH264Profile
 */
  public static short Mtc_CallDbGetVideoH264Profile() {
    return MtcCallDbJNI.Mtc_CallDbGetVideoH264Profile();
  }

/**
 * @brief Set video h264 payload type.
 *
 * @param [in] ucProfile Video h264 payload type parameter.
 *
 * @retval ZOK Set the video h264 payload type successfully.
 * @retval ZFAILED Set the video h264 payload type  failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVideoH264PayloadType
 */
  public static int Mtc_CallDbSetVideoH264PayloadType(int iPayloadType) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoH264PayloadType(iPayloadType);
  }

/**
 * @brief Get video h264 payload type.
 *
 * @return Video h264 payload type(96-127).
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetVideoH264PayloadType
 */
  public static int Mtc_CallDbGetVideoH264PayloadType() {
    return MtcCallDbJNI.Mtc_CallDbGetVideoH264PayloadType();
  }

/**
 * @brief Get video resolution.
 *
 * @param [out] pdwWidth Pixel value in horizontal direction.
 * @param [out] pdwHeight Pixel value in vertical direction.
 *
 * @retval ZOK Get the video resolution successfully.
 * @retval ZFAILED Get the video resolution failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetVideoResolution
 */
  public static int Mtc_CallDbGetVideoResolution(MtcNumber pdwWidth, MtcNumber pdwHeight) {
    return MtcCallDbJNI.Mtc_CallDbGetVideoResolution(pdwWidth, pdwHeight);
  }

/**
 * @brief Set video resolution.
 *
 * @param [in] dwWidth Pixel value in horizontal direction.
 * @param [in] dwHeight Pixel value in vertical direction.
 *
 * @retval ZOK Set the video resolution successfully.
 * @retval ZFAILED Set the video resolution failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVideoResolution
 */
  public static int Mtc_CallDbSetVideoResolution(int dwWidth, int dwHeight) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoResolution(dwWidth, dwHeight);
  }

/**
 * @brief Get video resolution.
 *
 * @return The string of video resolution name or "UNKNOWN" failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetVideoResolutionX
 */
  public static String Mtc_CallDbGetVideoResolutionX() {
    return MtcCallDbJNI.Mtc_CallDbGetVideoResolutionX();
  }

/**
 * @brief Set video resolution.
 *
 * @param [in] pcName Video resolution name string.
 *
 * @retval ZOK Set the video resolution successfully.
 * @retval ZFAILED Set the video resolution failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVideoResolutionX
 */
  public static int Mtc_CallDbSetVideoResolutionX(String pcName) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoResolutionX(pcName);
  }

/**
 * @brief Get media device manager option.
 *
 * @retval true Enable media device manager.
 * @retval false Disable media device manager.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetMdmEnable
 */
  public static boolean Mtc_CallDbGetMdmEnable() {
    return MtcCallDbJNI.Mtc_CallDbGetMdmEnable();
  }

/**
 * @brief Set media device manager option.
 *
 * @param [in] bEnable true to enable media device manager, otherwise to disable.
 *
 * @retval ZOK Set successfully.
 * @retval ZFAILED Set failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetMdmEnable
 */
  public static int Mtc_CallDbSetMdmEnable(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetMdmEnable(bEnable);
  }

/**
 * @brief Get resolution control of video stream.
 *
 * @retval true Resolution control is enabled for video stream.
 * @retval false Resolution control is disabled for video stream.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetResolutionControl
 */
  public static boolean Mtc_CallDbGetResolutionControl() {
    return MtcCallDbJNI.Mtc_CallDbGetResolutionControl();
  }

/**
 * @brief Set resolution control of video stream.
 *
 * @param [in] bEnable true to enable resolution control, otherwise to disable.
 *
 * @retval ZOK Set successfully.
 * @retval ZFAILED Set failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetResolutionControl
 */
  public static int Mtc_CallDbSetResolutionControl(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetResolutionControl(bEnable);
  }

/**
 * @brief Get framerate control of video stream.
 *
 * @retval true Framerate control is enabled for video stream.
 * @retval false Framerate control is disabled for video stream.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetFramerateControl
 */
  public static boolean Mtc_CallDbGetFramerateControl() {
    return MtcCallDbJNI.Mtc_CallDbGetFramerateControl();
  }

/**
 * @brief Set framerate control of video stream.
 *
 * @param [in] bEnable true to enable framerate control, otherwise to disable.
 *
 * @retval ZOK Set successfully.
 * @retval ZFAILED Set failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetFramerateControl
 */
  public static int Mtc_CallDbSetFramerateControl(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetFramerateControl(bEnable);
  }

/**
 * @brief Get CPU load control of video stream.
 *
 * @retval true CPU load control is enabled for video stream.
 * @retval false CPU load control is disabled for video stream.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetCpuLoadControl
 */
  public static boolean Mtc_CallDbGetCpuLoadControl() {
    return MtcCallDbJNI.Mtc_CallDbGetCpuLoadControl();
  }

/**
 * @brief Set CPU load control of video stream.
 *
 * @param [in] bEnable true to enable CPU load control, otherwise to disable.
 *
 * @retval ZOK Set successfully.
 * @retval ZFAILED Set failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetCpuLoadControl
 */
  public static int Mtc_CallDbSetCpuLoadControl(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetCpuLoadControl(bEnable);
  }

/**
 * @brief Get CPU load control of video stream.
 *
 * @return CPU load control target, from 0 to 100.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetCpuLoadTarget
 */
  public static int Mtc_CallDbGetCpuLoadTarget() {
    return MtcCallDbJNI.Mtc_CallDbGetCpuLoadTarget();
  }

/**
 * @brief Set CPU load control of video stream.
 *
 * @param [in] dwTarget CPU load control target, from 0 to 100.
 *
 * @retval ZOK Set successfully.
 * @retval ZFAILED Set failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetCpuLoadTarget
 */
  public static int Mtc_CallDbSetCpuLoadTarget(int dwTarget) {
    return MtcCallDbJNI.Mtc_CallDbSetCpuLoadTarget(dwTarget);
  }

/**
 * @brief Get FIR of video stream.
 *
 * @retval true FIR is enabled for video stream.
 * @retval false FIR is disabled for video stream.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetFir
 */
  public static boolean Mtc_CallDbGetFir() {
    return MtcCallDbJNI.Mtc_CallDbGetFir();
  }

/**
 * @brief Set FIR of video stream.
 *
 * @param [in] bEnable true to enable FIR, otherwise to disable.
 *
 * @retval ZOK Set successfully.
 * @retval ZFAILED Set failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetFir
 */
  public static int Mtc_CallDbSetFir(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetFir(bEnable);
  }

/**
 * @brief Get FIR using INFO method of video stream.
 *
 * @retval true FIR using INFO method is enabled for video stream.
 * @retval false FIR using INFO method is disabled for video stream.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetFirByInfo
 */
  public static boolean Mtc_CallDbGetFirByInfo() {
    return MtcCallDbJNI.Mtc_CallDbGetFirByInfo();
  }

/**
 * @brief Set FIR using INFO method of video stream.
 *
 * @param [in] bEnable true to enable FIR by INFO method, otherwise to disable.
 *
 * @retval ZOK Set successfully.
 * @retval ZFAILED Set failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetFirByInfo
 */
  public static int Mtc_CallDbSetFirByInfo(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetFirByInfo(bEnable);
  }

/**
 * @brief Get key frame period of video stream.
 *
 * @return Key frame period in milliseconds for video stream.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetFramerateControl
 */
  public static int Mtc_CallDbGetKeyPeriod() {
    return MtcCallDbJNI.Mtc_CallDbGetKeyPeriod();
  }

/**
 * @brief Set framerate control of video stream.
 *
 * @param [in] dwTimeLen Key frame period in milliseconds.
 *
 * @retval ZOK Set successfully.
 * @retval ZFAILED Set failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetKeyPeriod
 */
  public static int Mtc_CallDbSetKeyPeriod(int dwTimeLen) {
    return MtcCallDbJNI.Mtc_CallDbSetKeyPeriod(dwTimeLen);
  }

/**
 * @brief Get bandwidth efficiency mode of video stream.
 *
 * @retval true BEM is enabled for video stream.
 * @retval false BEM is disabled for video stream.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetVideoBem
 */
  public static boolean Mtc_CallDbGetVideoBem() {
    return MtcCallDbJNI.Mtc_CallDbGetVideoBem();
  }

/**
 * @brief Set bandwidth efficiency mode of video stream.
 *
 * @param [in] bEnable true to enable BEM, otherwise to disable BEM.
 *
 * @retval ZOK Set the video BEM option successfully.
 * @retval ZFAILED Set the video BEM option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVideoBem
 */
  public static int Mtc_CallDbSetVideoBem(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoBem(bEnable);
  }

/**
 * @brief Get bandwidth for video stream.
 * 
 * @param  [out] pdwDownBps Downstream bandwidth in bps.
 * @param  [out] pdwUpBps   Upstream bandwidth in bps.
 * 
 * @retval ZOK Set the video bandwidth option successfully.
 * @retval ZFAILED Set the video bandwidth option failed.
 */
  public static int Mtc_CallDbGetVideoBandwidth(MtcNumber pdwDownBps, MtcNumber pdwUpBps) {
    return MtcCallDbJNI.Mtc_CallDbGetVideoBandwidth(pdwDownBps, pdwUpBps);
  }

/**
 * @brief Set bandwidth for video stream.
 *
 * @param  [in] dwDownBps Downstream bandwidth in bps.
 * @param  [in] dwUpBps   Upstream bandwidth in bps.
 *
 * @retval ZOK Set the video bandwidth option successfully.
 * @retval ZFAILED Set the video bandwidth option failed.
 */
  public static int Mtc_CallDbSetVideoBandwidth(int dwDownBps, int dwUpBps) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoBandwidth(dwDownBps, dwUpBps);
  }

/**
 * @brief Get coordination of video orientation is enabled or not for send.
 *
 * @retval true Coordination of video orientation is enabled for send.
 * @retval false Coordination of video orientation is disabled for send.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetVideoOrientSend
 */
  public static boolean Mtc_CallDbGetVideoOrientSend() {
    return MtcCallDbJNI.Mtc_CallDbGetVideoOrientSend();
  }

/**
 * @brief Set coordination of video orientation is enabled or not for send.
 *
 * @param [in] bEnable true enable coordination of video orientation for send.
 *
 * @retval ZOK Set option successfully.
 * @retval ZFAILED Set option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVideoOrientSend
 */
  public static int Mtc_CallDbSetVideoOrientSend(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoOrientSend(bEnable);
  }

/**
 * @brief Get coordination of video orientation is enabled or not for receive.
 *
 * @retval true Coordination of video orientation is enabled for receive.
 * @retval false Coordination of video orientation is disabled for receive.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetVideoOrientRecv
 */
  public static boolean Mtc_CallDbGetVideoOrientRecv() {
    return MtcCallDbJNI.Mtc_CallDbGetVideoOrientRecv();
  }

/**
 * @brief Set coordination of video orientation is enabled or not for receive.
 *
 * @param [in] bEnable true enable coordination of video orientation for receive.
 *
 * @retval ZOK Set option successfully.
 * @retval ZFAILED Set option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVideoOrientRecv
 */
  public static int Mtc_CallDbSetVideoOrientRecv(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoOrientRecv(bEnable);
  }

/**
 * @brief Get RTP extension ID for coordination of video orientation.
 *
 * @return RTP extension ID.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetVideoOrientId
 */
  public static int Mtc_CallDbGetVideoOrientId() {
    return MtcCallDbJNI.Mtc_CallDbGetVideoOrientId();
  }

/**
 * @brief Set RTP extension ID for coordination of video orientation.
 *
 * @param [in] iId RTP extension ID.
 *
 * @retval ZOK Set option successfully.
 * @retval ZFAILED Set option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVideoOrientId
 */
  public static int Mtc_CallDbSetVideoOrientId(int iId) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoOrientId(iId);
  }

/**
 * @brief Get ARS option of video stream.
 *
 * @retval true ARS is enabled for video stream.
 * @retval false ARS is disabled for video stream.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetVideoArs
 */
  public static boolean Mtc_CallDbGetVideoArs() {
    return MtcCallDbJNI.Mtc_CallDbGetVideoArs();
  }

/**
 * @brief Set ARS option of video stream.
 *
 * @param [in] bEnable true to enable ARS, otherwise to disable ARS.
 *
 * @retval ZOK Set the video ARS option successfully.
 * @retval ZFAILED Set the video ARS option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVideoArs
 */
  public static int Mtc_CallDbSetVideoArs(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoArs(bEnable);
  }

/**
 * @brief Set mode of ARS.
 *
 * @param [in] ucMode Mode of ARS, @ref MtcMediaConstants::EN_MTC_ARS_QUALITY_SPATIAL.
 *
 * @retval ZOK on successfully.
 * @retval ZFAILED on failed.
 *
 * @see MtcCallDb::Mtc_CallDbGetArsMode
 */
  public static int Mtc_CallDbSetArsMode(short ucMode) {
    return MtcCallDbJNI.Mtc_CallDbSetArsMode(ucMode);
  }

/**
 * @brief Get mode of ARS.
 *
 * @return Current ARS mode, @ref MtcMediaConstants::EN_MTC_ARS_QUALITY_SPATIAL.
 *
 * @see MtcCallDb::Mtc_CallDbSetArsMode
 */
  public static short Mtc_CallDbGetArsMode() {
    return MtcCallDbJNI.Mtc_CallDbGetArsMode();
  }

/**
 * @brief Get ARS parameter from database.
 *
 * @param [out] piBrHi Highest bitrate.
 * @param [out] piBrLo Lowest bitrate.
 * @param [out] piFrHi Highest framerate.
 * @param [out] piFrLo Lowest framerate.

 * @retval ZOK Get successfully.
 * @retval ZFAILED Get failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetVideoArsParm
 */
  public static int Mtc_CallDbGetVideoArsParm(MtcNumber piBrHi, MtcNumber piBrLo, MtcNumber piFrHi, MtcNumber piFrLo) {
    return MtcCallDbJNI.Mtc_CallDbGetVideoArsParm(piBrHi, piBrLo, piFrHi, piFrLo);
  }

/**
 * @brief Set ARS parameter.
 *
 * @param [in] iBrHi Highest bitrate.
 * @param [in] iBrLo Lowest bitrate.
 * @param [in] iFrHi Highest framerate.
 * @param [in] iFrLo Lowest framerate.
 *
 * @retval ZOK Set successfully.
 * @retval ZFAILED Set failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVideoArsParm
 */
  public static int Mtc_CallDbSetVideoArsParm(int iBrHi, int iBrLo, int iFrHi, int iFrLo) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoArsParm(iBrHi, iBrLo, iFrHi, iFrLo);
  }

/**
 * @brief Set ARS parameter.
 *
 * @param [in] bNetWorkType the network type.
 *
 * @retval ZOK Set successfully.
 * @retval ZFAILED Set failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVideoArsParm
 */
  public static int Mtc_CallDbSetVideoArsParmX(boolean bNetWorkType) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoArsParmX(bNetWorkType);
  }

/**
 * @brief Set option of red/fec.
 *
 * @param [in] bEnable true to enable red/fec, otherwise to disable red/fec.
 *
 * @retval ZOK Set successfully.
 * @retval ZFAILED Set failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVideoRedFec
 */
  public static int Mtc_CallDbSetVideoRedFec(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoRedFec(bEnable);
  }

/**
 * @brief Get option of red/fec.
 *
 * @retval true ARS is enabled red/fec.
 * @retval false ARS is disabled red/fec.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetVideoRedFec
 */
  public static boolean Mtc_CallDbGetVideoRedFec() {
    return MtcCallDbJNI.Mtc_CallDbGetVideoRedFec();
  }

/**
 * @brief Get RTCP option from database.
 *
 * @retval true Start RTCP.
 * @retval false Do not start RTCP.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetRtcpEnable
 */
  public static boolean Mtc_CallDbGetRtcpEnable() {
    return MtcCallDbJNI.Mtc_CallDbGetRtcpEnable();
  }

/**
 * @brief Set RTCP option.
 *
 * @param [in] bEnable RTCP option.
 *
 * @retval ZOK Set RTCP option successfully.
 * @retval ZFAILED Set RTCP option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetRtcpEnable
 */
  public static int Mtc_CallDbSetRtcpEnable(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetRtcpEnable(bEnable);
  }

/**
 * @brief Get RTP port from database.
 *
 * @param [out] pwAMinPort RTP audio min port.
 * @param [out] pwAMaxPort RTP audio max port.
 * @param [out] pwVMinPort RTP video min port.
 * @param [out] pwVMaxPort RTP video max port.

 * @retval ZOK Get RTP port successfully.
 * @retval ZFAILED Get RTP port failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetRtpPort
 */
  public static int Mtc_CallDbGetRtpPort(MtcNumber pwAMinPort, MtcNumber pwAMaxPort, MtcNumber pwVMinPort, MtcNumber pwVMaxPort) {
    return MtcCallDbJNI.Mtc_CallDbGetRtpPort(pwAMinPort, pwAMaxPort, pwVMinPort, pwVMaxPort);
  }

/**
 * @brief Set RTP port.
 *
 * @param [in] wAMinPort RTP audio min port.
 * @param [in] wAMaxPort RTP audio max port.
 * @param [in] wVMinPort RTP video min port.
 * @param [in] wVMaxPort RTP video max port.
 *
 * @retval ZOK Set RTP port successfully.
 * @retval ZFAILED Set RTP port failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetRtpPort
 */
  public static int Mtc_CallDbSetRtpPort(int wAMinPort, int wAMaxPort, int wVMinPort, int wVMaxPort) {
    return MtcCallDbJNI.Mtc_CallDbSetRtpPort(wAMinPort, wAMaxPort, wVMinPort, wVMaxPort);
  }

/**
 * @brief Get RTP break detection time length in seconds from database.
 *
 * @return RTP break detection time length.
 *
 * @see MtcCallDb::Mtc_CallDbSetRtpBreakTime
 */
  public static int Mtc_CallDbGetRtpBreakTime() {
    return MtcCallDbJNI.Mtc_CallDbGetRtpBreakTime();
  }

/**
 * @brief Set RTP break detection time length in seconds.
 *
 * @param [in] dwTimeLen RTP break detection time length in seconds.
 *
 * @retval ZOK Set RTP break detection time length successfully.
 * @retval ZFAILED Set RTP break detection time length failed.
 *
 * @see MtcCallDb::Mtc_CallDbGetRtpBreakTime
 */
  public static int Mtc_CallDbSetRtpBreakTime(int dwTimeLen) {
    return MtcCallDbJNI.Mtc_CallDbSetRtpBreakTime(dwTimeLen);
  }

/**
 * @brief Get SRTP crypto type from database.
 *
 * @return SRTP crypto type, @ref MtcCallDbConstants::EN_MTC_DB_SRTP_CRYPTO_OFF.
 *
 * @see MtcCallDb::Mtc_CallDbSetSrtpCryptoType
 */
  public static int Mtc_CallDbGetSrtpCryptoType() {
    return MtcCallDbJNI.Mtc_CallDbGetSrtpCryptoType();
  }

/**
 * @brief Set SRTP crypto type.
 *
 * @param [in] iType SRTP crypto type, @ref MtcCallDbConstants::EN_MTC_DB_SRTP_CRYPTO_OFF.
 *
 * @retval ZOK Set SRTP crypto type successfully.
 * @retval ZFAILED Set SRTP crypto type failed.
 *
 * @see MtcCallDb::Mtc_CallDbGetSrtpCryptoType
 */
  public static int Mtc_CallDbSetSrtpCryptoType(int iType) {
    return MtcCallDbJNI.Mtc_CallDbSetSrtpCryptoType(iType);
  }

/**
 * @brief Get authenticated SRTP option from database.
 *
 * @retval true Enable authenticated SRTP.
 * @retval false Disable authenticated SRTP.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetSrtpAuthRtp
 */
  public static boolean Mtc_CallDbGetSrtpAuthRtp() {
    return MtcCallDbJNI.Mtc_CallDbGetSrtpAuthRtp();
  }

/**
 * @brief Set authenticated SRTP option.
 *
 * @param [in] bEnable true to enable authenticated SRTP, false to disable.
 *
 * @retval ZOK Set authenticated SRTP option successfully.
 * @retval ZFAILED Set authenticated SRTP option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetSrtpAuthRtp
 */
  public static int Mtc_CallDbSetSrtpAuthRtp(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetSrtpAuthRtp(bEnable);
  }

/**
 * @brief Get encrypted SRTP option from database.
 *
 * @retval true Enable encrypted SRTP.
 * @retval false Disable encrypted SRTP.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetSrtpEncryptRtp
 */
  public static boolean Mtc_CallDbGetSrtpEncryptRtp() {
    return MtcCallDbJNI.Mtc_CallDbGetSrtpEncryptRtp();
  }

/**
 * @brief Set encrypted SRTP option.
 *
 * @param [in] bEnable true to enable encrypted SRTP, false to disable.
 *
 * @retval ZOK Set encrypted SRTP option successfully.
 * @retval ZFAILED Set encrypted SRTP option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetSrtpEncryptRtp
 */
  public static int Mtc_CallDbSetSrtpEncryptRtp(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetSrtpEncryptRtp(bEnable);
  }

/**
 * @brief Get encrypted SRTCP option from database.
 *
 * @retval true Enable encrypted SRTCP.
 * @retval false Disable encrypted SRTCP.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetSrtpEncryptRtcp
 */
  public static boolean Mtc_CallDbGetSrtpEncryptRtcp() {
    return MtcCallDbJNI.Mtc_CallDbGetSrtpEncryptRtcp();
  }

/**
 * @brief Set encrypted SRTCP option.
 *
 * @param [in] bEnable true to enable encrypted SRTCP, false to disable.
 *
 * @retval ZOK Set encrypted SRTCP option successfully.
 * @retval ZFAILED Set encrypted SRTCP option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetSrtpEncryptRtcp
 */
  public static int Mtc_CallDbSetSrtpEncryptRtcp(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetSrtpEncryptRtcp(bEnable);
  }

/**
 * @brief Get NACK option from database.
 *
 * @retval true Start NACK.
 * @retval false Do not start NACK.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetNackEnable
 */
  public static boolean Mtc_CallDbGetNackEnable() {
    return MtcCallDbJNI.Mtc_CallDbGetNackEnable();
  }

/**
 * @brief Set NACK option.
 *
 * @param [in] bEnable NACK option.
 *
 * @retval ZOK Set NACK option successfully.
 * @retval ZFAILED Set NACK option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetNackEnable
 */
  public static int Mtc_CallDbSetNackEnable(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetNackEnable(bEnable);
  }

/**
 * @brief Get TMMBR option from database.
 *
 * @retval true Start TMMBR.
 * @retval false Do not start TMMBR.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetTmmbrEnable
 */
  public static boolean Mtc_CallDbGetTmmbrEnable() {
    return MtcCallDbJNI.Mtc_CallDbGetTmmbrEnable();
  }

/**
 * @brief Set TMMBR option.
 *
 * @param [in] bEnable TMMBR option.
 *
 * @retval ZOK Set TMMBR option successfully.
 * @retval ZFAILED Set TMMBR option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetTmmbrEnable
 */
  public static int Mtc_CallDbSetTmmbrEnable(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetTmmbrEnable(bEnable);
  }

/**
 * @brief Get audio rtcp-mux option from database.
 *
 * @retval true Start audio rtcp-mux.
 * @retval false Do not start audio rtcp-mux.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetAudioRtcpMuxEnable
 */
  public static boolean Mtc_CallDbGetAudioRtcpMuxEnable() {
    return MtcCallDbJNI.Mtc_CallDbGetAudioRtcpMuxEnable();
  }

/**
 * @brief Set audio rtcp-mux option.
 *
 * @param [in] bEnable audio rtcp-mux option.
 *
 * @retval ZOK Set audio rtcp-mux option successfully.
 * @retval ZFAILED Set audio rtcp-mux option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetAudioRtcpMuxEnable
 */
  public static int Mtc_CallDbSetAudioRtcpMuxEnable(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetAudioRtcpMuxEnable(bEnable);
  }

/**
 * @brief Get audio ARS option from database.
 *
 * @retval true Start audio ARS.
 * @retval false Do not start audio ARS.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetAudioArsEnable
 */
  public static boolean Mtc_CallDbGetAudioArsEnable() {
    return MtcCallDbJNI.Mtc_CallDbGetAudioArsEnable();
  }

/**
 * @brief Set audio ARS option.
 *
 * @param [in] bEnable audio ARS option.
 *
 * @retval ZOK Set audio ARS option successfully.
 * @retval ZFAILED Set audio ARS option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetAudioArsEnable
 */
  public static int Mtc_CallDbSetAudioArsEnable(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetAudioArsEnable(bEnable);
  }

/**
 * @brief Get video rtcp-mux option from database.
 *
 * @retval true Start video rtcp-mux.
 * @retval false Do not start video rtcp-mux.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetVideoRtcpMuxEnable
 */
  public static boolean Mtc_CallDbGetVideoRtcpMuxEnable() {
    return MtcCallDbJNI.Mtc_CallDbGetVideoRtcpMuxEnable();
  }

/**
 * @brief Set video rtcp-mux option.
 *
 * @param [in] bEnable video rtcp-mux option.
 *
 * @retval ZOK Set video rtcp-mux option successfully.
 * @retval ZFAILED Set video rtcp-mux option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVideoRtcpMuxEnable
 */
  public static int Mtc_CallDbSetVideoRtcpMuxEnable(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoRtcpMuxEnable(bEnable);
  }

/**
 * @brief Get RPSI option from database.
 *
 * @retval true Start RPSI.
 * @retval false Do not start RPSI.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetRpsiEnable
 */
  public static boolean Mtc_CallDbGetRpsiEnable() {
    return MtcCallDbJNI.Mtc_CallDbGetRpsiEnable();
  }

/**
 * @brief Set RPSI option.
 *
 * @param [in] bEnable RPSI option.
 *
 * @retval ZOK Set RPSI option successfully.
 * @retval ZFAILED Set RPSI option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetRpsiEnable
 */
  public static int Mtc_CallDbSetRpsiEnable(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetRpsiEnable(bEnable);
  }

/**
 * @brief Get small NALU option from database.
 *
 * @retval true Enable small NALU.
 * @retval false Disable small NALU.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetSmallNaluEnable
 */
  public static boolean Mtc_CallDbGetSmallNaluEnable() {
    return MtcCallDbJNI.Mtc_CallDbGetSmallNaluEnable();
  }

/**
 * @brief Set small NALU option.
 *
 * @param [in] bEnable Small NALU option.
 *
 * @retval ZOK Set small NALU option successfully.
 * @retval ZFAILED Set small NALU option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetSmallNaluEnable
 */
  public static int Mtc_CallDbSetSmallNaluEnable(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetSmallNaluEnable(bEnable);
  }

/**
 * @brief Get packet time length from database.
 *
 * @return Packet time length.
 *
 * @see MtcCallDb::Mtc_CallDbSetPtime
 */
  public static int Mtc_CallDbGetPtime() {
    return MtcCallDbJNI.Mtc_CallDbGetPtime();
  }

/**
 * @brief Set packet time length.
 *
 * @param [in] dwTimeLen Packet time length.
 *
 * @retval ZOK Set successfully.
 * @retval ZFAILED Set failed.
 *
 * @see MtcCallDb::Mtc_CallDbGetPtime
 */
  public static int Mtc_CallDbSetPtime(int dwTimeLen) {
    return MtcCallDbJNI.Mtc_CallDbSetPtime(dwTimeLen);
  }

/**
 * @brief Get bandwidth setting for CT.
 *
 * @return Bandwidth in bps.
 *
 * @see MtcCallDb::Mtc_CallDbSetBandwidthCt
 */
  public static int Mtc_CallDbGetBandwidthCt() {
    return MtcCallDbJNI.Mtc_CallDbGetBandwidthCt();
  }

/**
 * @brief Set bandwidth setting for CT.
 *
 * @param [in] dwBwKbps Bandwidth in bps.
 *
 * @retval ZOK Set successfully.
 * @retval ZFAILED Set failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetBandwidthCt
 */
  public static int Mtc_CallDbSetBandwidthCt(int dwBwKbps) {
    return MtcCallDbJNI.Mtc_CallDbSetBandwidthCt(dwBwKbps);
  }

/**
 * @brief Get bandwidth setting for AS.
 *
 * @return Bandwidth in bps.
 *
 * @see MtcCallDb::Mtc_CallDbSetBandwidthAs
 */
  public static int Mtc_CallDbGetBandwidthAs() {
    return MtcCallDbJNI.Mtc_CallDbGetBandwidthAs();
  }

/**
 * @brief Set bandwidth setting for AS.
 *
 * @param [in] dwBwKbps Bandwidth in bps.
 *
 * @retval ZOK Set successfully.
 * @retval ZFAILED Set failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetBandwidthAs
 */
  public static int Mtc_CallDbSetBandwidthAs(int dwBwKbps) {
    return MtcCallDbJNI.Mtc_CallDbSetBandwidthAs(dwBwKbps);
  }

/**
 * @brief Get the automatically accepted call option from database.
 *
 * @retval true Accept call automatically.
 * @retval false Do not accept call automatically.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetAutoAcptCall
 */
  public static boolean Mtc_CallDbGetAutoAcptCall() {
    return MtcCallDbJNI.Mtc_CallDbGetAutoAcptCall();
  }

/**
 * @brief Set the automatically accepted call option.
 *
 * @param [in] bEnable Automatically accepted call option.
 *
 * @retval ZOK Set the option successfully.
 * @retval ZFAILED Set the option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetAutoAcptCall
 */
  public static int Mtc_CallDbSetAutoAcptCall(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetAutoAcptCall(bEnable);
  }

/**
 * @brief Get the callin while calling option from database.
 *
 * @retval true Enable callin while calling.
 * @retval false Disable callin while calling.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetCwc
 */
  public static boolean Mtc_CallDbGetCwc() {
    return MtcCallDbJNI.Mtc_CallDbGetCwc();
  }

/**
 * @brief Set the callin while calling option.
 *
 * @param [in] bEnable Enable callin while calling.
 *
 * @retval ZOK Set the option successfully.
 * @retval ZFAILED Set the option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetCwc
 */
  public static int Mtc_CallDbSetCwc(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetCwc(bEnable);
  }

/**
 * @brief Get the do not disturb option from database.
 *
 * @retval true Do not disturb.
 * @retval false Normal.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetDoNotDisturb
 */
  public static boolean Mtc_CallDbGetDoNotDisturb() {
    return MtcCallDbJNI.Mtc_CallDbGetDoNotDisturb();
  }

/**
 * @brief Set the do not disturb option.
 *
 * @param [in] bEnable The do not disturb option.
 *
 * @retval ZOK Set the option successfully.
 * @retval ZFAILED Set the option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetDoNotDisturb
 */
  public static int Mtc_CallDbSetDoNotDisturb(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetDoNotDisturb(bEnable);
  }

/**
 * @brief Get the call forward unconditional information.
 *
 * @param [out] ppcUri Unconditional call forward uri.
 *
 * @retval true Call forword on uncoditional enabled.
 * @retval false Call forword on uncoditional disabled.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetCfuInfo
 */
  public static boolean Mtc_CallDbGetCfuInfo(MtcString ppcUri) {
    return MtcCallDbJNI.Mtc_CallDbGetCfuInfo(ppcUri);
  }

/**
 * @brief Set the call forward unconditional information.
 *
 * @param [in] bEnable Unconditional call forward option.
 * @param [in] pcUri Unconditional call forward URI.
 *
 * @retval ZOK Set call forward unconditional information successfully.
 * @retval ZFAILED Set call forward unconditional information failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetCfuInfo
 */
  public static int Mtc_CallDbSetCfuInfo(boolean bEnable, String pcUri) {
    return MtcCallDbJNI.Mtc_CallDbSetCfuInfo(bEnable, pcUri);
  }

/**
 * @brief Get the call forward on busy information.
 *
 * @param [out] ppcUri On busy call forward uri.
 *
 * @retval true Call forword on busy enabled.
 * @retval false Call forword on busy disabled.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetCfbInfo
 */
  public static boolean Mtc_CallDbGetCfbInfo(MtcString ppcUri) {
    return MtcCallDbJNI.Mtc_CallDbGetCfbInfo(ppcUri);
  }

/**
 * @brief Set the call forward on busy information.
 *
 * @param [in] bEnable On busy call forward option.
 * @param [in] pcUri On busy call forward URI.
 *
 * @retval ZOK Set call forward on busy information successfully.
 * @retval ZFAILED Set call forward on busy information failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetCfbInfo
 */
  public static int Mtc_CallDbSetCfbInfo(boolean bEnable, String pcUri) {
    return MtcCallDbJNI.Mtc_CallDbSetCfbInfo(bEnable, pcUri);
  }

/**
 * @brief Get call forward on no answer information.
 *
 * @param [out] ppcUri No answer call forward uri.
 * @param [out] pdwWaitLen No answer call forward wait time length.
 *
 * @retval true Call forword on no answer enabled.
 * @retval false Call forword on no answer disabled.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetCfnaInfo
 */
  public static boolean Mtc_CallDbGetCfnaInfo(MtcString ppcUri, MtcNumber pdwWaitLen) {
    return MtcCallDbJNI.Mtc_CallDbGetCfnaInfo(ppcUri, pdwWaitLen);
  }

/**
 * @brief Set call forward no answer information.
 *
 * @param [in] bEnable No answer call forward option.
 * @param [in] pcUri No answer call forward URI.
 * @param [in] dwWaitLen No answer call forward wait time length.
 *
 * @retval ZOK Set call forward no answer information successfully.
 * @retval ZFAILED Set call forward no answer information failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetCfnaInfo
 */
  public static int Mtc_CallDbSetCfnaInfo(boolean bEnable, String pcUri, int dwWaitLen) {
    return MtcCallDbJNI.Mtc_CallDbSetCfnaInfo(bEnable, pcUri, dwWaitLen);
  }

/**
 * @brief Get privacy option from database.
 *
 * @param [in] ucOpt Privacy option type, it can be one of MTC_PRIVACY_NONE,
 *                   MTC_PRIVACY_ID, MTC_PRIVACY_HEADER, MTC_PRIVACY_SESSION
 *                   and MTC_PRIVACY_CRITICAL.
 *
 * @retval true Corresponding privacy option is enable.
 * @retval false Corresponding privacy option is disable.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetPrivacyOpt
 */
  public static boolean Mtc_CallDbGetPrivacyOpt(short ucOpt) {
    return MtcCallDbJNI.Mtc_CallDbGetPrivacyOpt(ucOpt);
  }

/**
 * @brief Set privacy option from database.
 *
 * @param [in] ucOpt Privacy option type, it can be one of MTC_PRIVACY_NONE,
 *                   MTC_PRIVACY_ID, MTC_PRIVACY_HEADER, MTC_PRIVACY_SESSION
 *                   and MTC_PRIVACY_CRITICAL.
 * @param [in] bEnable true to enable corresponding privacy option.
 *
 * @retval ZOK Set the option successfully.
 * @retval ZFAILED Set the option option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetPrivacyOpt
 */
  public static int Mtc_CallDbSetPrivacyOpt(short ucOpt, boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetPrivacyOpt(ucOpt, bEnable);
  }

/**
 * @brief Get asymmetrical negotiation from database.
 *
 * @retval true Asymmetrical negotiation is enable.
 * @retval false Asymmetrical negotiation is disable.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetAsymNego
 */
  public static boolean Mtc_CallDbGetAsymNego() {
    return MtcCallDbJNI.Mtc_CallDbGetAsymNego();
  }

/**
 * @brief Set asymmetrical negotiation.
 *
 * @param [in] bEnable true to enable asymmetrical negotiation.
 *
 * @retval ZOK Set the option successfully.
 * @retval ZFAILED Set the option option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetAsymNego
 */
  public static int Mtc_CallDbSetAsymNego(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetAsymNego(bEnable);
  }

/**
 * @brief Get session timer information.
 *
 * @param [out] pdwType Session timer type, @ref MtcCallDbConstants::EN_MTC_DB_SESSION_TIME_OFF.
 * @param [out] pdwTmrLen Session timer length.
 * @param [out] pdwMinTmrLen Min session timer length.
 *
 * @retval true Get session timer information successfully.
 * @retval false Get session timer information failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetSessTmrInfo
 */
  public static int Mtc_CallDbGetSessTmrInfo(MtcNumber pdwType, MtcNumber pdwTmrLen, MtcNumber pdwMinTmrLen) {
    return MtcCallDbJNI.Mtc_CallDbGetSessTmrInfo(pdwType, pdwTmrLen, pdwMinTmrLen);
  }

/**
 * @brief Set session timer information.
 *
 * @param [in] dwType Session timer type, @ref MtcCallDbConstants::EN_MTC_DB_SESSION_TIME_OFF.
 * @param [in] dwTmrLen Session timer length.
 * @param [in] dwMinTmrLen Min session timer length.
 *
 * @retval ZOK Set the option successfully.
 * @retval ZFAILED Set the option option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetSessTmrInfo
 */
  public static int Mtc_CallDbSetSessTmrInfo(int dwType, int dwTmrLen, int dwMinTmrLen) {
    return MtcCallDbJNI.Mtc_CallDbSetSessTmrInfo(dwType, dwTmrLen, dwMinTmrLen);
  }

/**
 * @brief Get call prefix content.
 *
 * @return The string of call prefix content.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetPrefixCont
 */
  public static String Mtc_CallDbGetPrefixCont() {
    return MtcCallDbJNI.Mtc_CallDbGetPrefixCont();
  }

/**
 * @brief Set call prefix content.
 *
 * @param [in] pcPrefixCont Call prefix content.
 *
 * @retval ZOK Set the call prefix content successfull.
 * @retval ZFAILED Set the call prefix content failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetPrefixCont
 */
  public static int Mtc_CallDbSetPrefixCont(String pcPrefixCont) {
    return MtcCallDbJNI.Mtc_CallDbSetPrefixCont(pcPrefixCont);
  }

/**
 * @brief Get call prefix option.
 *
 * @return The call prefix option, @ref MtcCallDbConstants::EN_MTC_DB_PREFIX_OPT_NO_USE.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetPrefixOption
 */
  public static int Mtc_CallDbGetPrefixOption() {
    return MtcCallDbJNI.Mtc_CallDbGetPrefixOption();
  }

/**
 * @brief Set call prefix option.
 *
 * @param [in] iPrefixOpt Call prefix option, @ref MtcCallDbConstants::EN_MTC_DB_PREFIX_OPT_NO_USE.
 *
 * @retval ZOK Set the call prefix option successfull.
 * @retval ZFAILED Set the call prefix option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetPrefixOption
 */
  public static int Mtc_CallDbSetPrefixOption(int iPrefixOpt) {
    return MtcCallDbJNI.Mtc_CallDbSetPrefixOption(iPrefixOpt);
  }

}
